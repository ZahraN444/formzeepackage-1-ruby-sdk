# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # QueryRelationships Model.
  class QueryRelationships < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [RelationshipsPayment]
    attr_accessor :payment

    # TODO: Write general description for this method
    # @return [RelationshipsPaymentAdmission]
    attr_accessor :payment_admission

    # TODO: Write general description for this method
    # @return [RelationshipsPaymentSubmission]
    attr_accessor :payment_submission

    # TODO: Write general description for this method
    # @return [RelationshipsQuery]
    attr_accessor :query

    # TODO: Write general description for this method
    # @return [RelationshipsQueryAdmission]
    attr_accessor :query_admission

    # TODO: Write general description for this method
    # @return [RelationshipsFullQueryResponse]
    attr_accessor :query_response

    # TODO: Write general description for this method
    # @return [RelationshipsQuerySubmission]
    attr_accessor :query_submission

    # TODO: Write general description for this method
    # @return [RelationshipsPaymentRecall]
    attr_accessor :recall

    # TODO: Write general description for this method
    # @return [RelationshipsPaymentRecallSubmission]
    attr_accessor :recall_submission

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['payment'] = 'payment'
      @_hash['payment_admission'] = 'payment_admission'
      @_hash['payment_submission'] = 'payment_submission'
      @_hash['query'] = 'query'
      @_hash['query_admission'] = 'query_admission'
      @_hash['query_response'] = 'query_response'
      @_hash['query_submission'] = 'query_submission'
      @_hash['recall'] = 'recall'
      @_hash['recall_submission'] = 'recall_submission'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        payment
        payment_admission
        payment_submission
        query
        query_admission
        query_response
        query_submission
        recall
        recall_submission
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(payment = SKIP,
                   payment_admission = SKIP,
                   payment_submission = SKIP,
                   query = SKIP,
                   query_admission = SKIP,
                   query_response = SKIP,
                   query_submission = SKIP,
                   recall = SKIP,
                   recall_submission = SKIP)
      @payment = payment unless payment == SKIP
      @payment_admission = payment_admission unless payment_admission == SKIP
      @payment_submission = payment_submission unless payment_submission == SKIP
      @query = query unless query == SKIP
      @query_admission = query_admission unless query_admission == SKIP
      @query_response = query_response unless query_response == SKIP
      @query_submission = query_submission unless query_submission == SKIP
      @recall = recall unless recall == SKIP
      @recall_submission = recall_submission unless recall_submission == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      payment = RelationshipsPayment.from_hash(hash['payment']) if hash['payment']
      payment_admission = RelationshipsPaymentAdmission.from_hash(hash['payment_admission']) if
        hash['payment_admission']
      payment_submission = RelationshipsPaymentSubmission.from_hash(hash['payment_submission']) if
        hash['payment_submission']
      query = RelationshipsQuery.from_hash(hash['query']) if hash['query']
      query_admission = RelationshipsQueryAdmission.from_hash(hash['query_admission']) if
        hash['query_admission']
      query_response = RelationshipsFullQueryResponse.from_hash(hash['query_response']) if
        hash['query_response']
      query_submission = RelationshipsQuerySubmission.from_hash(hash['query_submission']) if
        hash['query_submission']
      recall = RelationshipsPaymentRecall.from_hash(hash['recall']) if hash['recall']
      if hash['recall_submission']
        recall_submission = RelationshipsPaymentRecallSubmission.from_hash(hash['recall_submission'])
      end

      # Create object from extracted values.
      QueryRelationships.new(payment,
                             payment_admission,
                             payment_submission,
                             query,
                             query_admission,
                             query_response,
                             query_submission,
                             recall,
                             recall_submission)
    end
  end
end
