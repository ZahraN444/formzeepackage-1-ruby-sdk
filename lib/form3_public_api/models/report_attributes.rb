# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Form3PublicApi
  # ReportAttributes Model.
  class ReportAttributes < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Array[String]]
    attr_accessor :formats

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :generation_time

    # TODO: Write general description for this method
    # @return [Date]
    attr_accessor :processing_date

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :report_source

    # Type of report.
    # @return [String]
    attr_accessor :report_type

    # Type of report.
    # @return [String]
    attr_accessor :report_type_description

    # Users or organisations this report was generated for
    # @return [Array[ReportUser]]
    attr_accessor :report_users

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['formats'] = 'formats'
      @_hash['generation_time'] = 'generation_time'
      @_hash['processing_date'] = 'processing_date'
      @_hash['report_source'] = 'report_source'
      @_hash['report_type'] = 'report_type'
      @_hash['report_type_description'] = 'report_type_description'
      @_hash['report_users'] = 'report_users'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        formats
        generation_time
        processing_date
        report_source
        report_type
        report_type_description
        report_users
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(formats = SKIP,
                   generation_time = SKIP,
                   processing_date = SKIP,
                   report_source = SKIP,
                   report_type = SKIP,
                   report_type_description = SKIP,
                   report_users = SKIP)
      @formats = formats unless formats == SKIP
      @generation_time = generation_time unless generation_time == SKIP
      @processing_date = processing_date unless processing_date == SKIP
      @report_source = report_source unless report_source == SKIP
      @report_type = report_type unless report_type == SKIP
      @report_type_description = report_type_description unless report_type_description == SKIP
      @report_users = report_users unless report_users == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      formats = hash.key?('formats') ? hash['formats'] : SKIP
      generation_time = if hash.key?('generation_time')
                          (DateTimeHelper.from_rfc3339(hash['generation_time']) if hash['generation_time'])
                        else
                          SKIP
                        end
      processing_date =
        hash.key?('processing_date') ? hash['processing_date'] : SKIP
      report_source = hash.key?('report_source') ? hash['report_source'] : SKIP
      report_type = hash.key?('report_type') ? hash['report_type'] : SKIP
      report_type_description =
        hash.key?('report_type_description') ? hash['report_type_description'] : SKIP
      # Parameter is an array, so we need to iterate through it
      report_users = nil
      unless hash['report_users'].nil?
        report_users = []
        hash['report_users'].each do |structure|
          report_users << (ReportUser.from_hash(structure) if structure)
        end
      end

      report_users = SKIP unless hash.key?('report_users')

      # Create object from extracted values.
      ReportAttributes.new(formats,
                           generation_time,
                           processing_date,
                           report_source,
                           report_type,
                           report_type_description,
                           report_users)
    end

    def to_custom_generation_time
      DateTimeHelper.to_rfc3339(generation_time)
    end
  end
end
