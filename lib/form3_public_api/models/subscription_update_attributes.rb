# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # SubscriptionUpdateAttributes Model.
  class SubscriptionUpdateAttributes < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [CallbackTransportEnum]
    attr_accessor :callback_transport

    # Deprecated. Please use callback_uris instead
    # @return [String]
    attr_accessor :callback_uri

    # Deprecated. Please use callback_uris instead
    # @return [Array[CallbackURI]]
    attr_accessor :callback_uris

    # Deprecated. Please use callback_uris instead
    # @return [TrueClass | FalseClass]
    attr_accessor :deactivated

    # Deprecated. Please use callback_uris instead
    # @return [String]
    attr_accessor :event_type

    # Deprecated. Please use callback_uris instead
    # @return [String]
    attr_accessor :filter

    # Deprecated. Please use callback_uris instead
    # @return [String]
    attr_accessor :record_type

    # All purpose list of key-value pairs to store specific data for the
    # associated subscription.
    # @return [Array[SubscriptionUserDefinedData]]
    attr_accessor :user_defined_data

    # All purpose list of key-value pairs to store specific data for the
    # associated subscription.
    # @return [UUID | String]
    attr_accessor :user_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['callback_transport'] = 'callback_transport'
      @_hash['callback_uri'] = 'callback_uri'
      @_hash['callback_uris'] = 'callback_uris'
      @_hash['deactivated'] = 'deactivated'
      @_hash['event_type'] = 'event_type'
      @_hash['filter'] = 'filter'
      @_hash['record_type'] = 'record_type'
      @_hash['user_defined_data'] = 'user_defined_data'
      @_hash['user_id'] = 'user_id'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        callback_transport
        callback_uri
        callback_uris
        deactivated
        event_type
        filter
        record_type
        user_defined_data
        user_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(callback_transport = SKIP,
                   callback_uri = SKIP,
                   callback_uris = SKIP,
                   deactivated = SKIP,
                   event_type = SKIP,
                   filter = SKIP,
                   record_type = SKIP,
                   user_defined_data = SKIP,
                   user_id = SKIP)
      @callback_transport = callback_transport unless callback_transport == SKIP
      @callback_uri = callback_uri unless callback_uri == SKIP
      @callback_uris = callback_uris unless callback_uris == SKIP
      @deactivated = deactivated unless deactivated == SKIP
      @event_type = event_type unless event_type == SKIP
      @filter = filter unless filter == SKIP
      @record_type = record_type unless record_type == SKIP
      @user_defined_data = user_defined_data unless user_defined_data == SKIP
      @user_id = user_id unless user_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      callback_transport =
        hash.key?('callback_transport') ? hash['callback_transport'] : SKIP
      callback_uri = hash.key?('callback_uri') ? hash['callback_uri'] : SKIP
      # Parameter is an array, so we need to iterate through it
      callback_uris = nil
      unless hash['callback_uris'].nil?
        callback_uris = []
        hash['callback_uris'].each do |structure|
          callback_uris << (CallbackURI.from_hash(structure) if structure)
        end
      end

      callback_uris = SKIP unless hash.key?('callback_uris')
      deactivated = hash.key?('deactivated') ? hash['deactivated'] : SKIP
      event_type = hash.key?('event_type') ? hash['event_type'] : SKIP
      filter = hash.key?('filter') ? hash['filter'] : SKIP
      record_type = hash.key?('record_type') ? hash['record_type'] : SKIP
      # Parameter is an array, so we need to iterate through it
      user_defined_data = nil
      unless hash['user_defined_data'].nil?
        user_defined_data = []
        hash['user_defined_data'].each do |structure|
          user_defined_data << (SubscriptionUserDefinedData.from_hash(structure) if structure)
        end
      end

      user_defined_data = SKIP unless hash.key?('user_defined_data')
      user_id = hash.key?('user_id') ? hash['user_id'] : SKIP

      # Create object from extracted values.
      SubscriptionUpdateAttributes.new(callback_transport,
                                       callback_uri,
                                       callback_uris,
                                       deactivated,
                                       event_type,
                                       filter,
                                       record_type,
                                       user_defined_data,
                                       user_id)
    end
  end
end
