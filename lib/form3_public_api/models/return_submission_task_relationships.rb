# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # ReturnSubmissionTaskRelationships Model.
  class ReturnSubmissionTaskRelationships < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [RelationshipPayments]
    attr_accessor :payment

    # TODO: Write general description for this method
    # @return [RelationshipReturns]
    attr_accessor :payment_return

    # TODO: Write general description for this method
    # @return [RelationshipReturnSubmissions]
    attr_accessor :return_submission

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['payment'] = 'payment'
      @_hash['payment_return'] = 'payment_return'
      @_hash['return_submission'] = 'return_submission'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        payment
        payment_return
        return_submission
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(payment = SKIP,
                   payment_return = SKIP,
                   return_submission = SKIP)
      @payment = payment unless payment == SKIP
      @payment_return = payment_return unless payment_return == SKIP
      @return_submission = return_submission unless return_submission == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      payment = RelationshipPayments.from_hash(hash['payment']) if hash['payment']
      payment_return = RelationshipReturns.from_hash(hash['payment_return']) if
        hash['payment_return']
      return_submission = RelationshipReturnSubmissions.from_hash(hash['return_submission']) if
        hash['return_submission']

      # Create object from extracted values.
      ReturnSubmissionTaskRelationships.new(payment,
                                            payment_return,
                                            return_submission)
    end
  end
end
