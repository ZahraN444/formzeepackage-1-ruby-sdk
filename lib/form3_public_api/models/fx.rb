# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # Fx Model.
  class Fx < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Reference to the foreign exchange contract associated with the transaction
    # @return [String]
    attr_accessor :contract_reference

    # Factor used to convert an amount from the instructed currency into the
    # transaction currency: i.e. to convert the `fx.original_amount`, expressed
    # in the `fx.original_currency`, to `amount` specified in `currency`.
    # Decimal value, represented as a string, maximum length 12. Must be > 0.
    # @return [String]
    attr_accessor :exchange_rate

    # Amount of money to be moved between the debtor and creditor, before
    # deduction of charges, expressed in the currency as instructed by the
    # initiating party. Decimal value. Must be > 0.
    # @return [String]
    attr_accessor :original_amount

    # Currency of `original_amount`. Currency code as defined in ISO 4217.
    # @return [String]
    attr_accessor :original_currency

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['contract_reference'] = 'contract_reference'
      @_hash['exchange_rate'] = 'exchange_rate'
      @_hash['original_amount'] = 'original_amount'
      @_hash['original_currency'] = 'original_currency'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        contract_reference
        exchange_rate
        original_amount
        original_currency
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(contract_reference = SKIP,
                   exchange_rate = SKIP,
                   original_amount = SKIP,
                   original_currency = SKIP)
      @contract_reference = contract_reference unless contract_reference == SKIP
      @exchange_rate = exchange_rate unless exchange_rate == SKIP
      @original_amount = original_amount unless original_amount == SKIP
      @original_currency = original_currency unless original_currency == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      contract_reference =
        hash.key?('contract_reference') ? hash['contract_reference'] : SKIP
      exchange_rate = hash.key?('exchange_rate') ? hash['exchange_rate'] : SKIP
      original_amount =
        hash.key?('original_amount') ? hash['original_amount'] : SKIP
      original_currency =
        hash.key?('original_currency') ? hash['original_currency'] : SKIP

      # Create object from extracted values.
      Fx.new(contract_reference,
             exchange_rate,
             original_amount,
             original_currency)
    end
  end
end
