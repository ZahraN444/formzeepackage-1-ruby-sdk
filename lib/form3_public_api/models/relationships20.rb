# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # Relationships20 Model.
  class Relationships20 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [RelationshipLinks]
    attr_accessor :decision_admission

    # TODO: Write general description for this method
    # @return [RelationshipLinks]
    attr_accessor :decision_submission

    # TODO: Write general description for this method
    # @return [RelationshipLinks]
    attr_accessor :payment

    # TODO: Write general description for this method
    # @return [RelationshipLinks]
    attr_accessor :recall

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['decision_admission'] = 'decision_admission'
      @_hash['decision_submission'] = 'decision_submission'
      @_hash['payment'] = 'payment'
      @_hash['recall'] = 'recall'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        decision_admission
        decision_submission
        payment
        recall
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(decision_admission = SKIP,
                   decision_submission = SKIP,
                   payment = SKIP,
                   recall = SKIP)
      @decision_admission = decision_admission unless decision_admission == SKIP
      @decision_submission = decision_submission unless decision_submission == SKIP
      @payment = payment unless payment == SKIP
      @recall = recall unless recall == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      decision_admission = RelationshipLinks.from_hash(hash['decision_admission']) if
        hash['decision_admission']
      decision_submission = RelationshipLinks.from_hash(hash['decision_submission']) if
        hash['decision_submission']
      payment = RelationshipLinks.from_hash(hash['payment']) if hash['payment']
      recall = RelationshipLinks.from_hash(hash['recall']) if hash['recall']

      # Create object from extracted values.
      Relationships20.new(decision_admission,
                          decision_submission,
                          payment,
                          recall)
    end
  end
end
