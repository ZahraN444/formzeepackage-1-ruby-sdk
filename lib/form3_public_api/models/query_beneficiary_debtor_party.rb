# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # QueryBeneficiaryDebtorParty Model.
  class QueryBeneficiaryDebtorParty < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Debtor/Beneficiary account number. Allows upper case and numeric
    # characters.
    # @return [String]
    attr_accessor :account_number

    # The type of identification given at `account_number` attribute
    # @return [QueryAccountNumberCodeEnum]
    attr_accessor :account_number_code

    # The type of identification given at `account_number` attribute
    # @return [QueryBeneficiaryDebtorAccountProxy]
    attr_accessor :account_proxy

    # Debtor/Beneficiary agents bank information.
    # @return [AccountWith]
    attr_accessor :account_with

    # Additional address line of the debtor/beneficiary address
    # @return [String]
    attr_accessor :additional_address_line

    # Debtor/Beneficiary birth city
    # @return [String]
    attr_accessor :birth_city

    # Debtor/Beneficiary birth country. ISO 3166 format country code
    # @return [String]
    attr_accessor :birth_country

    # Debtor/Beneficiary birth date. Formatted ISO 8601 format YYYY-MM-DD
    # @return [Date]
    attr_accessor :birth_date

    # Debtor/Beneficiary birth province
    # @return [String]
    attr_accessor :birth_province

    # Building number of the debtor/beneficiary address
    # @return [String]
    attr_accessor :building_number

    # City/Town of the debtor/beneficiary address
    # @return [String]
    attr_accessor :city

    # Country of debtor/beneficiary address. ISO 3166 format country code
    # @return [String]
    attr_accessor :country

    # Country of residence of the debtor/beneficiary, ISO 3166 format country
    # code
    # @return [String]
    attr_accessor :country_of_residence

    # Debtor/Beneficiary name
    # @return [String]
    attr_accessor :name

    # Organisation identification of a debtor/beneficiary, in the case that the
    # debtor/beneficiary is an organisation and not a private person.
    # @return [String]
    attr_accessor :organisation_identification

    # The code that specifies the type of `organisation_identification`
    # @return [String]
    attr_accessor :organisation_identification_code

    # Issuer of the `organisation_identification`
    # @return [String]
    attr_accessor :organisation_identification_issuer

    # The code that specifies the scheme of `organisation_identification`
    # @return [String]
    attr_accessor :organisation_identification_scheme

    # Array for additional ID(s) of ultimate organisation
    # @return [Array[QueryBeneficiaryDebtorOrganisationIdentification]]
    attr_accessor :organisation_identifications

    # Post code of the debtor/beneficiary address
    # @return [String]
    attr_accessor :post_code

    # Post code of the debtor/beneficiary address
    # @return [QueryPrivateIdentification]
    attr_accessor :private_identification

    # Province of the debtor/beneficiary address
    # @return [String]
    attr_accessor :province

    # Street name of the debtor/beneficiary address
    # @return [String]
    attr_accessor :street_name

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_number'] = 'account_number'
      @_hash['account_number_code'] = 'account_number_code'
      @_hash['account_proxy'] = 'account_proxy'
      @_hash['account_with'] = 'account_with'
      @_hash['additional_address_line'] = 'additional_address_line'
      @_hash['birth_city'] = 'birth_city'
      @_hash['birth_country'] = 'birth_country'
      @_hash['birth_date'] = 'birth_date'
      @_hash['birth_province'] = 'birth_province'
      @_hash['building_number'] = 'building_number'
      @_hash['city'] = 'city'
      @_hash['country'] = 'country'
      @_hash['country_of_residence'] = 'country_of_residence'
      @_hash['name'] = 'name'
      @_hash['organisation_identification'] = 'organisation_identification'
      @_hash['organisation_identification_code'] =
        'organisation_identification_code'
      @_hash['organisation_identification_issuer'] =
        'organisation_identification_issuer'
      @_hash['organisation_identification_scheme'] =
        'organisation_identification_scheme'
      @_hash['organisation_identifications'] = 'organisation_identifications'
      @_hash['post_code'] = 'post_code'
      @_hash['private_identification'] = 'private_identification'
      @_hash['province'] = 'province'
      @_hash['street_name'] = 'street_name'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        account_number
        account_number_code
        account_proxy
        account_with
        additional_address_line
        birth_city
        birth_country
        birth_date
        birth_province
        building_number
        city
        country
        country_of_residence
        name
        organisation_identification
        organisation_identification_code
        organisation_identification_issuer
        organisation_identification_scheme
        organisation_identifications
        post_code
        private_identification
        province
        street_name
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_number = SKIP,
                   account_number_code = SKIP,
                   account_proxy = SKIP,
                   account_with = SKIP,
                   additional_address_line = SKIP,
                   birth_city = SKIP,
                   birth_country = SKIP,
                   birth_date = SKIP,
                   birth_province = SKIP,
                   building_number = SKIP,
                   city = SKIP,
                   country = SKIP,
                   country_of_residence = SKIP,
                   name = SKIP,
                   organisation_identification = SKIP,
                   organisation_identification_code = SKIP,
                   organisation_identification_issuer = SKIP,
                   organisation_identification_scheme = SKIP,
                   organisation_identifications = SKIP,
                   post_code = SKIP,
                   private_identification = SKIP,
                   province = SKIP,
                   street_name = SKIP)
      @account_number = account_number unless account_number == SKIP
      @account_number_code = account_number_code unless account_number_code == SKIP
      @account_proxy = account_proxy unless account_proxy == SKIP
      @account_with = account_with unless account_with == SKIP
      @additional_address_line = additional_address_line unless additional_address_line == SKIP
      @birth_city = birth_city unless birth_city == SKIP
      @birth_country = birth_country unless birth_country == SKIP
      @birth_date = birth_date unless birth_date == SKIP
      @birth_province = birth_province unless birth_province == SKIP
      @building_number = building_number unless building_number == SKIP
      @city = city unless city == SKIP
      @country = country unless country == SKIP
      @country_of_residence = country_of_residence unless country_of_residence == SKIP
      @name = name unless name == SKIP
      unless organisation_identification == SKIP
        @organisation_identification =
          organisation_identification
      end
      unless organisation_identification_code == SKIP
        @organisation_identification_code =
          organisation_identification_code
      end
      unless organisation_identification_issuer == SKIP
        @organisation_identification_issuer =
          organisation_identification_issuer
      end
      unless organisation_identification_scheme == SKIP
        @organisation_identification_scheme =
          organisation_identification_scheme
      end
      unless organisation_identifications == SKIP
        @organisation_identifications =
          organisation_identifications
      end
      @post_code = post_code unless post_code == SKIP
      @private_identification = private_identification unless private_identification == SKIP
      @province = province unless province == SKIP
      @street_name = street_name unless street_name == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_number =
        hash.key?('account_number') ? hash['account_number'] : SKIP
      account_number_code =
        hash.key?('account_number_code') ? hash['account_number_code'] : SKIP
      account_proxy = QueryBeneficiaryDebtorAccountProxy.from_hash(hash['account_proxy']) if
        hash['account_proxy']
      account_with = AccountWith.from_hash(hash['account_with']) if hash['account_with']
      additional_address_line =
        hash.key?('additional_address_line') ? hash['additional_address_line'] : SKIP
      birth_city = hash.key?('birth_city') ? hash['birth_city'] : SKIP
      birth_country = hash.key?('birth_country') ? hash['birth_country'] : SKIP
      birth_date = hash.key?('birth_date') ? hash['birth_date'] : SKIP
      birth_province =
        hash.key?('birth_province') ? hash['birth_province'] : SKIP
      building_number =
        hash.key?('building_number') ? hash['building_number'] : SKIP
      city = hash.key?('city') ? hash['city'] : SKIP
      country = hash.key?('country') ? hash['country'] : SKIP
      country_of_residence =
        hash.key?('country_of_residence') ? hash['country_of_residence'] : SKIP
      name = hash.key?('name') ? hash['name'] : SKIP
      organisation_identification =
        hash.key?('organisation_identification') ? hash['organisation_identification'] : SKIP
      organisation_identification_code =
        hash.key?('organisation_identification_code') ? hash['organisation_identification_code'] : SKIP
      organisation_identification_issuer =
        hash.key?('organisation_identification_issuer') ? hash['organisation_identification_issuer'] : SKIP
      organisation_identification_scheme =
        hash.key?('organisation_identification_scheme') ? hash['organisation_identification_scheme'] : SKIP
      # Parameter is an array, so we need to iterate through it
      organisation_identifications = nil
      unless hash['organisation_identifications'].nil?
        organisation_identifications = []
        hash['organisation_identifications'].each do |structure|
          organisation_identifications << (QueryBeneficiaryDebtorOrganisationIdentification.from_hash(structure) if structure)
        end
      end

      organisation_identifications = SKIP unless hash.key?('organisation_identifications')
      post_code = hash.key?('post_code') ? hash['post_code'] : SKIP
      if hash['private_identification']
        private_identification = QueryPrivateIdentification.from_hash(hash['private_identification'])
      end
      province = hash.key?('province') ? hash['province'] : SKIP
      street_name = hash.key?('street_name') ? hash['street_name'] : SKIP

      # Create object from extracted values.
      QueryBeneficiaryDebtorParty.new(account_number,
                                      account_number_code,
                                      account_proxy,
                                      account_with,
                                      additional_address_line,
                                      birth_city,
                                      birth_country,
                                      birth_date,
                                      birth_province,
                                      building_number,
                                      city,
                                      country,
                                      country_of_residence,
                                      name,
                                      organisation_identification,
                                      organisation_identification_code,
                                      organisation_identification_issuer,
                                      organisation_identification_scheme,
                                      organisation_identifications,
                                      post_code,
                                      private_identification,
                                      province,
                                      street_name)
    end
  end
end
