# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # Links Model.
  class Links < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Link to the first resource in the list
    # @return [String]
    attr_accessor :first

    # Link to the last resource in the list
    # @return [String]
    attr_accessor :last

    # Link to the next resource in the list
    # @return [String]
    attr_accessor :mnext

    # Link to the previous resource in the list
    # @return [String]
    attr_accessor :prev

    # Link to this resource type
    # @return [String]
    attr_accessor :mself

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['first'] = 'first'
      @_hash['last'] = 'last'
      @_hash['mnext'] = 'next'
      @_hash['prev'] = 'prev'
      @_hash['mself'] = 'self'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        first
        last
        mnext
        prev
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(mself = nil,
                   first = SKIP,
                   last = SKIP,
                   mnext = SKIP,
                   prev = SKIP)
      @first = first unless first == SKIP
      @last = last unless last == SKIP
      @mnext = mnext unless mnext == SKIP
      @prev = prev unless prev == SKIP
      @mself = mself
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      mself = hash.key?('self') ? hash['self'] : nil
      first = hash.key?('first') ? hash['first'] : SKIP
      last = hash.key?('last') ? hash['last'] : SKIP
      mnext = hash.key?('next') ? hash['next'] : SKIP
      prev = hash.key?('prev') ? hash['prev'] : SKIP

      # Create object from extracted values.
      Links.new(mself,
                first,
                last,
                mnext,
                prev)
    end
  end
end
