# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # BACS Model.
  class BACS < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [TrueClass | FalseClass]
    attr_accessor :accepts_payments

    # TODO: Write general description for this method
    # @return [AccountSwitchingEnum]
    attr_accessor :account_switching

    # TODO: Write general description for this method
    # @return [Array[TransactionGroupCodeEnum]]
    attr_accessor :allowed_transactions

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :service_status

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['accepts_payments'] = 'accepts_payments'
      @_hash['account_switching'] = 'account_switching'
      @_hash['allowed_transactions'] = 'allowed_transactions'
      @_hash['service_status'] = 'service_status'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        accepts_payments
        account_switching
        allowed_transactions
        service_status
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(accepts_payments = false,
                   account_switching = SKIP,
                   allowed_transactions = SKIP,
                   service_status = SKIP)
      @accepts_payments = accepts_payments unless accepts_payments == SKIP
      @account_switching = account_switching unless account_switching == SKIP
      @allowed_transactions = allowed_transactions unless allowed_transactions == SKIP
      @service_status = service_status unless service_status == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      accepts_payments = hash['accepts_payments'] ||= false
      account_switching =
        hash.key?('account_switching') ? hash['account_switching'] : SKIP
      allowed_transactions =
        hash.key?('allowed_transactions') ? hash['allowed_transactions'] : SKIP
      service_status =
        hash.key?('service_status') ? hash['service_status'] : SKIP

      # Create object from extracted values.
      BACS.new(accepts_payments,
               account_switching,
               allowed_transactions,
               service_status)
    end
  end
end
