# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # Attributes31 Model.
  class Attributes31 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [CurrencyAndAmount]
    attr_accessor :charges_amount

    # Unique identifier for organisations collecting payments
    # @return [String]
    attr_accessor :clearing_id

    # Unique identifier for organisations collecting payments
    # @return [CurrencyAndAmount]
    attr_accessor :compensation_amount

    # Date on which the operation is to be debited from the debtor account.
    # Formatted according to ISO 8601 format: YYYY-MM-DD.
    # @return [Date]
    attr_accessor :processing_date

    # Date on which the operation is to be debited from the debtor account.
    # Formatted according to ISO 8601 format: YYYY-MM-DD.
    # @return [CurrencyAndAmount]
    attr_accessor :return_amount

    # Date on which the operation is to be debited from the debtor account.
    # Formatted according to ISO 8601 format: YYYY-MM-DD.
    # @return [String]
    attr_accessor :return_code

    # Date on which the operation is to be debited from the debtor account.
    # Formatted according to ISO 8601 format: YYYY-MM-DD.
    # @return [ReturnInitiatorEnum]
    attr_accessor :return_initiator

    # Date on which the operation is processed by the scheme. Formatted
    # according to ISO 8601 format: YYYY-MM-DD. Only used if different from
    # `processing_date`.
    # @return [Date]
    attr_accessor :scheme_processing_date

    # Date on which the operation is processed by the scheme. Formatted
    # according to ISO 8601 format: YYYY-MM-DD. Only used if different from
    # `processing_date`.
    # @return [String]
    attr_accessor :scheme_transaction_id

    # Specifies the details on how the settlement of the transaction between the
    # instructing agent and the instructed agent is completed
    # @return [Settlement]
    attr_accessor :settlement

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['charges_amount'] = 'charges_amount'
      @_hash['clearing_id'] = 'clearing_id'
      @_hash['compensation_amount'] = 'compensation_amount'
      @_hash['processing_date'] = 'processing_date'
      @_hash['return_amount'] = 'return_amount'
      @_hash['return_code'] = 'return_code'
      @_hash['return_initiator'] = 'return_initiator'
      @_hash['scheme_processing_date'] = 'scheme_processing_date'
      @_hash['scheme_transaction_id'] = 'scheme_transaction_id'
      @_hash['settlement'] = 'settlement'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        charges_amount
        clearing_id
        compensation_amount
        processing_date
        return_amount
        return_code
        return_initiator
        scheme_processing_date
        scheme_transaction_id
        settlement
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(charges_amount = SKIP,
                   clearing_id = SKIP,
                   compensation_amount = SKIP,
                   processing_date = SKIP,
                   return_amount = SKIP,
                   return_code = SKIP,
                   return_initiator = SKIP,
                   scheme_processing_date = SKIP,
                   scheme_transaction_id = SKIP,
                   settlement = SKIP)
      @charges_amount = charges_amount unless charges_amount == SKIP
      @clearing_id = clearing_id unless clearing_id == SKIP
      @compensation_amount = compensation_amount unless compensation_amount == SKIP
      @processing_date = processing_date unless processing_date == SKIP
      @return_amount = return_amount unless return_amount == SKIP
      @return_code = return_code unless return_code == SKIP
      @return_initiator = return_initiator unless return_initiator == SKIP
      @scheme_processing_date = scheme_processing_date unless scheme_processing_date == SKIP
      @scheme_transaction_id = scheme_transaction_id unless scheme_transaction_id == SKIP
      @settlement = settlement unless settlement == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      charges_amount = CurrencyAndAmount.from_hash(hash['charges_amount']) if
        hash['charges_amount']
      clearing_id = hash.key?('clearing_id') ? hash['clearing_id'] : SKIP
      compensation_amount = CurrencyAndAmount.from_hash(hash['compensation_amount']) if
        hash['compensation_amount']
      processing_date =
        hash.key?('processing_date') ? hash['processing_date'] : SKIP
      return_amount = CurrencyAndAmount.from_hash(hash['return_amount']) if hash['return_amount']
      return_code = hash.key?('return_code') ? hash['return_code'] : SKIP
      return_initiator =
        hash.key?('return_initiator') ? hash['return_initiator'] : SKIP
      scheme_processing_date =
        hash.key?('scheme_processing_date') ? hash['scheme_processing_date'] : SKIP
      scheme_transaction_id =
        hash.key?('scheme_transaction_id') ? hash['scheme_transaction_id'] : SKIP
      settlement = Settlement.from_hash(hash['settlement']) if hash['settlement']

      # Create object from extracted values.
      Attributes31.new(charges_amount,
                       clearing_id,
                       compensation_amount,
                       processing_date,
                       return_amount,
                       return_code,
                       return_initiator,
                       scheme_processing_date,
                       scheme_transaction_id,
                       settlement)
    end
  end
end
