# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Form3PublicApi
  # Attributes18 Model.
  class Attributes18 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Timestamp when the change was requested
    # @return [DateTime]
    attr_accessor :action_time

    # User ID of the user who requested the change
    # @return [UUID | String]
    attr_accessor :actioned_by

    # Snapshot of what the data would be after the change (empty if the request
    # was to DELETE a record)
    # @return [Object]
    attr_accessor :after_data

    # Snapshot of the data before the change (empty if the request was to CREATE
    # a new record)
    # @return [Object]
    attr_accessor :before_data

    # Textual description of the change being made
    # @return [String]
    attr_accessor :description

    # ID of the resource that is being changed
    # @return [UUID | String]
    attr_accessor :record_id

    # Type of the resource that is being changed
    # @return [String]
    attr_accessor :record_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['action_time'] = 'action_time'
      @_hash['actioned_by'] = 'actioned_by'
      @_hash['after_data'] = 'after_data'
      @_hash['before_data'] = 'before_data'
      @_hash['description'] = 'description'
      @_hash['record_id'] = 'record_id'
      @_hash['record_type'] = 'record_type'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        action_time
        actioned_by
        after_data
        before_data
        description
        record_id
        record_type
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(action_time = SKIP,
                   actioned_by = SKIP,
                   after_data = SKIP,
                   before_data = SKIP,
                   description = SKIP,
                   record_id = SKIP,
                   record_type = SKIP)
      @action_time = action_time unless action_time == SKIP
      @actioned_by = actioned_by unless actioned_by == SKIP
      @after_data = after_data unless after_data == SKIP
      @before_data = before_data unless before_data == SKIP
      @description = description unless description == SKIP
      @record_id = record_id unless record_id == SKIP
      @record_type = record_type unless record_type == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      action_time = if hash.key?('action_time')
                      (DateTimeHelper.from_rfc3339(hash['action_time']) if hash['action_time'])
                    else
                      SKIP
                    end
      actioned_by = hash.key?('actioned_by') ? hash['actioned_by'] : SKIP
      after_data = hash.key?('after_data') ? hash['after_data'] : SKIP
      before_data = hash.key?('before_data') ? hash['before_data'] : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP
      record_id = hash.key?('record_id') ? hash['record_id'] : SKIP
      record_type = hash.key?('record_type') ? hash['record_type'] : SKIP

      # Create object from extracted values.
      Attributes18.new(action_time,
                       actioned_by,
                       after_data,
                       before_data,
                       description,
                       record_id,
                       record_type)
    end

    def to_custom_action_time
      DateTimeHelper.to_rfc3339(action_time)
    end
  end
end
