# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # References a transaction initiated to fix the case under investigation.
  class CorrectionTransactionInformation < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Amount of money moved between the instructing agent and the instructed
    # agent.
    # @return [String]
    attr_accessor :amount

    # Currency of the transaction amount. Currency code as defined in [ISO
    # 4217](https://www.iso.org/iso/home/standards/currency_codes.htm)
    # @return [String]
    attr_accessor :currency

    # Unique identification, as assigned by the initiating party, to
    # unambiguously identify the transaction. This identification is passed on,
    # unchanged, throughout the entire end-to-end chain.
    # @return [String]
    attr_accessor :end_to_end_reference

    # Unique identification, as assigned by an instructing party for an
    # instructed party, to unambiguously identify the instruction.
    # @return [String]
    attr_accessor :instruction_id

    # Date on which the amount of money ceases to be available to the agent that
    # owes it and when the amount of money becomes available to the agent to
    # which it is due.
    # @return [Date]
    attr_accessor :processing_date

    # Reference for the corrective payment for this query case.
    # @return [Array[QueryReference]]
    attr_accessor :references

    # Unique identification, as assigned by the first instructing agent, to
    # unambiguously identify the transaction that is passed on, unchanged,
    # throughout the entire interbank chain.
    # @return [String]
    attr_accessor :scheme_transaction_id

    # The scheme-specific unique transaction ID to unambiguously identify the
    # message. Populated by the scheme.
    # @return [String]
    attr_accessor :unique_scheme_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['amount'] = 'amount'
      @_hash['currency'] = 'currency'
      @_hash['end_to_end_reference'] = 'end_to_end_reference'
      @_hash['instruction_id'] = 'instruction_id'
      @_hash['processing_date'] = 'processing_date'
      @_hash['references'] = 'references'
      @_hash['scheme_transaction_id'] = 'scheme_transaction_id'
      @_hash['unique_scheme_id'] = 'unique_scheme_id'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        amount
        currency
        end_to_end_reference
        instruction_id
        processing_date
        references
        scheme_transaction_id
        unique_scheme_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(amount = SKIP,
                   currency = SKIP,
                   end_to_end_reference = SKIP,
                   instruction_id = SKIP,
                   processing_date = SKIP,
                   references = SKIP,
                   scheme_transaction_id = SKIP,
                   unique_scheme_id = SKIP)
      @amount = amount unless amount == SKIP
      @currency = currency unless currency == SKIP
      @end_to_end_reference = end_to_end_reference unless end_to_end_reference == SKIP
      @instruction_id = instruction_id unless instruction_id == SKIP
      @processing_date = processing_date unless processing_date == SKIP
      @references = references unless references == SKIP
      @scheme_transaction_id = scheme_transaction_id unless scheme_transaction_id == SKIP
      @unique_scheme_id = unique_scheme_id unless unique_scheme_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      amount = hash.key?('amount') ? hash['amount'] : SKIP
      currency = hash.key?('currency') ? hash['currency'] : SKIP
      end_to_end_reference =
        hash.key?('end_to_end_reference') ? hash['end_to_end_reference'] : SKIP
      instruction_id =
        hash.key?('instruction_id') ? hash['instruction_id'] : SKIP
      processing_date =
        hash.key?('processing_date') ? hash['processing_date'] : SKIP
      # Parameter is an array, so we need to iterate through it
      references = nil
      unless hash['references'].nil?
        references = []
        hash['references'].each do |structure|
          references << (QueryReference.from_hash(structure) if structure)
        end
      end

      references = SKIP unless hash.key?('references')
      scheme_transaction_id =
        hash.key?('scheme_transaction_id') ? hash['scheme_transaction_id'] : SKIP
      unique_scheme_id =
        hash.key?('unique_scheme_id') ? hash['unique_scheme_id'] : SKIP

      # Create object from extracted values.
      CorrectionTransactionInformation.new(amount,
                                           currency,
                                           end_to_end_reference,
                                           instruction_id,
                                           processing_date,
                                           references,
                                           scheme_transaction_id,
                                           unique_scheme_id)
    end
  end
end
