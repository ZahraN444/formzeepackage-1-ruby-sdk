# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Form3PublicApi
  # Attributes48 Model.
  class Attributes48 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :file_identifier

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :file_number

    # TODO: Write general description for this method
    # @return [Date]
    attr_accessor :last_payment_date

    # TODO: Write general description for this method
    # @return [MandateAttributes]
    attr_accessor :original_mandate

    # TODO: Write general description for this method
    # @return [MandateSubmissionStatusEnum]
    attr_accessor :status

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :status_reason

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :submission_datetime

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :submission_reason

    # TODO: Write general description for this method
    # @return [MandateAttributes]
    attr_accessor :submitted_mandate

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['file_identifier'] = 'file_identifier'
      @_hash['file_number'] = 'file_number'
      @_hash['last_payment_date'] = 'last_payment_date'
      @_hash['original_mandate'] = 'original_mandate'
      @_hash['status'] = 'status'
      @_hash['status_reason'] = 'status_reason'
      @_hash['submission_datetime'] = 'submission_datetime'
      @_hash['submission_reason'] = 'submission_reason'
      @_hash['submitted_mandate'] = 'submitted_mandate'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        file_identifier
        file_number
        last_payment_date
        original_mandate
        status
        status_reason
        submission_datetime
        submission_reason
        submitted_mandate
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(file_identifier = SKIP,
                   file_number = SKIP,
                   last_payment_date = SKIP,
                   original_mandate = SKIP,
                   status = SKIP,
                   status_reason = SKIP,
                   submission_datetime = SKIP,
                   submission_reason = SKIP,
                   submitted_mandate = SKIP)
      @file_identifier = file_identifier unless file_identifier == SKIP
      @file_number = file_number unless file_number == SKIP
      @last_payment_date = last_payment_date unless last_payment_date == SKIP
      @original_mandate = original_mandate unless original_mandate == SKIP
      @status = status unless status == SKIP
      @status_reason = status_reason unless status_reason == SKIP
      @submission_datetime = submission_datetime unless submission_datetime == SKIP
      @submission_reason = submission_reason unless submission_reason == SKIP
      @submitted_mandate = submitted_mandate unless submitted_mandate == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      file_identifier =
        hash.key?('file_identifier') ? hash['file_identifier'] : SKIP
      file_number = hash.key?('file_number') ? hash['file_number'] : SKIP
      last_payment_date =
        hash.key?('last_payment_date') ? hash['last_payment_date'] : SKIP
      original_mandate = MandateAttributes.from_hash(hash['original_mandate']) if
        hash['original_mandate']
      status = hash.key?('status') ? hash['status'] : SKIP
      status_reason = hash.key?('status_reason') ? hash['status_reason'] : SKIP
      submission_datetime = if hash.key?('submission_datetime')
                              (DateTimeHelper.from_rfc3339(hash['submission_datetime']) if hash['submission_datetime'])
                            else
                              SKIP
                            end
      submission_reason =
        hash.key?('submission_reason') ? hash['submission_reason'] : SKIP
      submitted_mandate = MandateAttributes.from_hash(hash['submitted_mandate']) if
        hash['submitted_mandate']

      # Create object from extracted values.
      Attributes48.new(file_identifier,
                       file_number,
                       last_payment_date,
                       original_mandate,
                       status,
                       status_reason,
                       submission_datetime,
                       submission_reason,
                       submitted_mandate)
    end

    def to_custom_submission_datetime
      DateTimeHelper.to_rfc3339(submission_datetime)
    end
  end
end
