# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # DuplicateTransactionInformation Model.
  class DuplicateTransactionInformation < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Unique identification, as assigned by the initiating party, to
    # unambiguously identify the transaction. This identification is passed on,
    # unchanged, throughout the entire end-to-end chain.
    # @return [String]
    attr_accessor :end_to_end_reference

    # Reference for the duplicated payment for this Exception and Investigation
    # case.
    # @return [Array[QueryReference]]
    attr_accessor :references

    # Unique identification, as assigned by the first instructing agent, to
    # unambiguously identify the transaction that is passed on, unchanged,
    # throughout the entire interbank chain.
    # @return [String]
    attr_accessor :scheme_transaction_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['end_to_end_reference'] = 'end_to_end_reference'
      @_hash['references'] = 'references'
      @_hash['scheme_transaction_id'] = 'scheme_transaction_id'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        end_to_end_reference
        references
        scheme_transaction_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(end_to_end_reference = SKIP,
                   references = SKIP,
                   scheme_transaction_id = SKIP)
      @end_to_end_reference = end_to_end_reference unless end_to_end_reference == SKIP
      @references = references unless references == SKIP
      @scheme_transaction_id = scheme_transaction_id unless scheme_transaction_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      end_to_end_reference =
        hash.key?('end_to_end_reference') ? hash['end_to_end_reference'] : SKIP
      # Parameter is an array, so we need to iterate through it
      references = nil
      unless hash['references'].nil?
        references = []
        hash['references'].each do |structure|
          references << (QueryReference.from_hash(structure) if structure)
        end
      end

      references = SKIP unless hash.key?('references')
      scheme_transaction_id =
        hash.key?('scheme_transaction_id') ? hash['scheme_transaction_id'] : SKIP

      # Create object from extracted values.
      DuplicateTransactionInformation.new(end_to_end_reference,
                                          references,
                                          scheme_transaction_id)
    end
  end
end
