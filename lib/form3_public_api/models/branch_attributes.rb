# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # BranchAttributes Model.
  class BranchAttributes < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # All accepted payments will receive the matching qualifier code
    # @return [AcceptanceQualifierEnum]
    attr_accessor :acceptance_qualifier

    # Local country bank identifier. In the UK this is the sort code.
    # @return [String]
    attr_accessor :bank_id

    # ISO 20022 code used to identify the type of bank ID being used
    # @return [String]
    attr_accessor :bank_id_code

    # if present â€“ has effect of making secondary reference in payment mandatory
    # @return [String]
    attr_accessor :reference_mask

    # All purpose list of key-value pairs to store specific data.
    # @return [Array[UserDefinedData]]
    attr_accessor :user_defined_data

    # optional validation to apply to the branch
    # @return [BranchValidationTypeEnum]
    attr_accessor :validation_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['acceptance_qualifier'] = 'acceptance_qualifier'
      @_hash['bank_id'] = 'bank_id'
      @_hash['bank_id_code'] = 'bank_id_code'
      @_hash['reference_mask'] = 'reference_mask'
      @_hash['user_defined_data'] = 'user_defined_data'
      @_hash['validation_type'] = 'validation_type'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        acceptance_qualifier
        reference_mask
        user_defined_data
        validation_type
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(bank_id = nil,
                   bank_id_code = nil,
                   acceptance_qualifier = SKIP,
                   reference_mask = SKIP,
                   user_defined_data = SKIP,
                   validation_type = SKIP)
      @acceptance_qualifier = acceptance_qualifier unless acceptance_qualifier == SKIP
      @bank_id = bank_id
      @bank_id_code = bank_id_code
      @reference_mask = reference_mask unless reference_mask == SKIP
      @user_defined_data = user_defined_data unless user_defined_data == SKIP
      @validation_type = validation_type unless validation_type == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      bank_id = hash.key?('bank_id') ? hash['bank_id'] : nil
      bank_id_code = hash.key?('bank_id_code') ? hash['bank_id_code'] : nil
      acceptance_qualifier =
        hash.key?('acceptance_qualifier') ? hash['acceptance_qualifier'] : SKIP
      reference_mask =
        hash.key?('reference_mask') ? hash['reference_mask'] : SKIP
      # Parameter is an array, so we need to iterate through it
      user_defined_data = nil
      unless hash['user_defined_data'].nil?
        user_defined_data = []
        hash['user_defined_data'].each do |structure|
          user_defined_data << (UserDefinedData.from_hash(structure) if structure)
        end
      end

      user_defined_data = SKIP unless hash.key?('user_defined_data')
      validation_type =
        hash.key?('validation_type') ? hash['validation_type'] : SKIP

      # Create object from extracted values.
      BranchAttributes.new(bank_id,
                           bank_id_code,
                           acceptance_qualifier,
                           reference_mask,
                           user_defined_data,
                           validation_type)
    end
  end
end
