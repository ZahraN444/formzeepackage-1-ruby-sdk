# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # QueryResponseAttributes Model.
  class QueryResponseAttributes < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [QueryResponseAnswerEnum]
    attr_accessor :answer

    # TODO: Write general description for this method
    # @return [QueryResponseCharges]
    attr_accessor :charges

    # TODO: Write general description for this method
    # @return [QueryResponseCompensation]
    attr_accessor :compensation

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :compensation_amount

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :currency

    # TODO: Write general description for this method
    # @return [QueryResponseInformation]
    attr_accessor :information

    # TODO: Write general description for this method
    # @return [QueryResponseStatusCodeEnum]
    attr_accessor :status_code

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['answer'] = 'answer'
      @_hash['charges'] = 'charges'
      @_hash['compensation'] = 'compensation'
      @_hash['compensation_amount'] = 'compensation_amount'
      @_hash['currency'] = 'currency'
      @_hash['information'] = 'information'
      @_hash['status_code'] = 'status_code'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        charges
        compensation
        compensation_amount
        currency
        information
        status_code
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(answer = nil,
                   charges = SKIP,
                   compensation = SKIP,
                   compensation_amount = SKIP,
                   currency = SKIP,
                   information = SKIP,
                   status_code = SKIP)
      @answer = answer
      @charges = charges unless charges == SKIP
      @compensation = compensation unless compensation == SKIP
      @compensation_amount = compensation_amount unless compensation_amount == SKIP
      @currency = currency unless currency == SKIP
      @information = information unless information == SKIP
      @status_code = status_code unless status_code == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      answer = hash.key?('answer') ? hash['answer'] : nil
      charges = QueryResponseCharges.from_hash(hash['charges']) if hash['charges']
      compensation = QueryResponseCompensation.from_hash(hash['compensation']) if
        hash['compensation']
      compensation_amount =
        hash.key?('compensation_amount') ? hash['compensation_amount'] : SKIP
      currency = hash.key?('currency') ? hash['currency'] : SKIP
      information = QueryResponseInformation.from_hash(hash['information']) if hash['information']
      status_code = hash.key?('status_code') ? hash['status_code'] : SKIP

      # Create object from extracted values.
      QueryResponseAttributes.new(answer,
                                  charges,
                                  compensation,
                                  compensation_amount,
                                  currency,
                                  information,
                                  status_code)
    end
  end
end
