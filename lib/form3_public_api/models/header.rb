# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # Header Model.
  class Header < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Destination SWIFT logical terminal address. Complete 12-character SWIFT
    # destination, including BIC (x8), logical terminal code (x1) and branch
    # code (x).
    # @return [String]
    attr_accessor :destination

    # The message type of the SWIFT payment, has to match `[A-Z]{2}[0-9]{3}`.
    # Currently `MT103` is the only supported value
    # @return [String]
    attr_accessor :message_type

    # SWIFT priority. Either `Normal` or `Priority`.
    # @return [String]
    attr_accessor :priority

    # The destination SWIFT BIC for SWIFT MT messages being sent by Form3 client
    # to SWIFT. Formatted as BIC8 or BIC11.
    # @return [String]
    attr_accessor :recipient

    # The source SWIFT BIC for SWIFT MT messages being received by Form3 client
    # from SWIFT. Formatted as BIC8 or BIC11.
    # @return [String]
    attr_accessor :source

    # Message User Reference (MUR) value, which can be up to 16 characters, and
    # will be returned in the ACK
    # @return [String]
    attr_accessor :user_reference

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['destination'] = 'destination'
      @_hash['message_type'] = 'message_type'
      @_hash['priority'] = 'priority'
      @_hash['recipient'] = 'recipient'
      @_hash['source'] = 'source'
      @_hash['user_reference'] = 'user_reference'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        destination
        message_type
        priority
        recipient
        source
        user_reference
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(destination = SKIP,
                   message_type = SKIP,
                   priority = SKIP,
                   recipient = SKIP,
                   source = SKIP,
                   user_reference = SKIP)
      @destination = destination unless destination == SKIP
      @message_type = message_type unless message_type == SKIP
      @priority = priority unless priority == SKIP
      @recipient = recipient unless recipient == SKIP
      @source = source unless source == SKIP
      @user_reference = user_reference unless user_reference == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      destination = hash.key?('destination') ? hash['destination'] : SKIP
      message_type = hash.key?('message_type') ? hash['message_type'] : SKIP
      priority = hash.key?('priority') ? hash['priority'] : SKIP
      recipient = hash.key?('recipient') ? hash['recipient'] : SKIP
      source = hash.key?('source') ? hash['source'] : SKIP
      user_reference =
        hash.key?('user_reference') ? hash['user_reference'] : SKIP

      # Create object from extracted values.
      Header.new(destination,
                 message_type,
                 priority,
                 recipient,
                 source,
                 user_reference)
    end
  end
end
