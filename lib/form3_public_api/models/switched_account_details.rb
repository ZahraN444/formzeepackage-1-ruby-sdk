# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # Alternate Account details to use in case the account has been switched away
  # from this organisation.
  class SwitchedAccountDetails < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Switched account number. Must be a UK account number, maximum length 8
    # characters.
    # @return [String]
    attr_accessor :account_number

    # ISO 20022 code used to identify the type of account number being used
    # @return [String]
    attr_reader :account_number_code

    # The type of the account provided in account_number. Only required if
    # requested by the beneficiary party.
    # @return [Integer]
    attr_accessor :account_type

    # Information about the financial institution servicing the account.
    # @return [AccountHoldingEntity]
    attr_accessor :account_with

    # Starting date for the account to be effectively switched
    # @return [Date]
    attr_accessor :switched_effective_date

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_number'] = 'account_number'
      @_hash['account_number_code'] = 'account_number_code'
      @_hash['account_type'] = 'account_type'
      @_hash['account_with'] = 'account_with'
      @_hash['switched_effective_date'] = 'switched_effective_date'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        account_type
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(account_number = nil,
                   account_with = nil,
                   switched_effective_date = nil,
                   account_type = 0)
      @account_number = account_number
      @account_number_code = 'BBAN'
      @account_type = account_type unless account_type == SKIP
      @account_with = account_with
      @switched_effective_date = switched_effective_date
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_number =
        hash.key?('account_number') ? hash['account_number'] : nil
      account_with = AccountHoldingEntity.from_hash(hash['account_with']) if hash['account_with']
      switched_effective_date =
        hash.key?('switched_effective_date') ? hash['switched_effective_date'] : nil
      account_type = hash['account_type'] ||= 0

      # Create object from extracted values.
      SwitchedAccountDetails.new(account_number,
                                 account_with,
                                 switched_effective_date,
                                 account_type)
    end
  end
end
