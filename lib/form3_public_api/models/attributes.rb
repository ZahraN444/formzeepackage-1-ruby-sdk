# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # Attributes Model.
  class Attributes < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # All accepted payments will receive the matching qualifier code
    # @return [AcceptanceQualifierEnum]
    attr_accessor :acceptance_qualifier

    # Is the account business or personal?
    # @return [AccountClassification1Enum]
    attr_accessor :account_classification

    # - deprecated - Is the account opted out of account matching, e.g. CoP?
    # @return [TrueClass | FalseClass]
    attr_accessor :account_matching_opt_out

    # Account number of the account. A unique number will automatically be
    # generated if not provided.
    # @return [String]
    attr_accessor :account_number

    # - deprecated - Alternative account names. Used for Confirmation of Payee
    # matching.
    # @return [Array[String]]
    attr_accessor :alternative_bank_account_names

    # Alternative names. Used for Confirmation of Payee matching.
    # @return [Array[String]]
    attr_accessor :alternative_names

    # - deprecated - Primary account name. Used for Confirmation of Payee
    # matching. Required if confirmation_of_payee_enabled is true for the
    # organisation.
    # @return [String]
    attr_accessor :bank_account_name

    # Local country bank identifier. In the UK this is the sort code.
    # @return [String]
    attr_accessor :bank_id

    # ISO 20022 code used to identify the type of bank ID being used
    # @return [String]
    attr_accessor :bank_id_code

    # ISO 4217 code used to identify the base currency of the account
    # @return [String]
    attr_accessor :base_currency

    # SWIFT BIC in either 8 or 11 character format
    # @return [String]
    attr_accessor :bic

    # ISO 3166-1 code used to identify the domicile of the account
    # @return [String]
    attr_accessor :country

    # A free-format reference that can be used to link this account to an
    # external system
    # @return [String]
    attr_accessor :customer_id

    # - deprecated - Customer first name.
    # @return [String]
    attr_accessor :first_name

    # IBAN of the account. Will be calculated from other fields if not supplied.
    # @return [String]
    attr_accessor :iban

    # Is the account joint?
    # @return [TrueClass | FalseClass]
    attr_accessor :joint_account

    # Account holder names (for example title, first name, last name). Used for
    # Confirmation of Payee matching.
    # @return [Array[String]]
    attr_accessor :name

    # Describes the status of the account for name matching via CoP. The value
    # determines the code with which Form3 responds to matched CoP requests to
    # this account.
    # @return [NameMatchingStatusEnum]
    attr_accessor :name_matching_status

    # Describes the status of the account for name matching via CoP. The value
    # determines the code with which Form3 responds to matched CoP requests to
    # this account.
    # @return [AccountAttributesOrganisationIdentification]
    attr_accessor :organisation_identification

    # Describes the status of the account for name matching via CoP. The value
    # determines the code with which Form3 responds to matched CoP requests to
    # this account.
    # @return [AccountAttributesPrivateIdentification]
    attr_accessor :private_identification

    # - deprecated - Accounting system or service. It will be added to each
    # payment received to an account.
    # @return [String]
    attr_accessor :processing_service

    # When set will apply a validation mask on the payment reference to each
    # payment received to an account.
    # @return [String]
    attr_accessor :reference_mask

    # Secondary identification, e.g. building society roll number. Used for
    # Confirmation of Payee.
    # @return [String]
    attr_accessor :secondary_identification

    # Current status of the account
    # @return [StatusEnum]
    attr_accessor :status

    # Used to determine appropriate scheme or internal payment reject code.
    # Account status field must be set to closed to use this functionality.
    # @return [StatusReasonEnum]
    attr_accessor :status_reason

    # - deprecated - Indicates whether the account has been switched using the
    # Current Account Switch Service.
    # @return [TrueClass | FalseClass]
    attr_accessor :switched

    # Alternate Account details to use in case the account has been switched
    # away from this organisation.
    # @return [SwitchedAccountDetails]
    attr_accessor :switched_account_details

    # - deprecated - Customer title.
    # @return [String]
    attr_accessor :title

    # All purpose list of key-value pairs to store specific data for the
    # associated account. It will be added to each payment received to an
    # account.
    # @return [Array[UserDefinedData]]
    attr_accessor :user_defined_data

    # - deprecated - All purpose field to store specific data for the associated
    # account. It will be added to each payment received to an account.
    # @return [String]
    attr_accessor :user_defined_information

    # optional validation to apply to the account
    # @return [ValidationTypeEnum]
    attr_accessor :validation_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['acceptance_qualifier'] = 'acceptance_qualifier'
      @_hash['account_classification'] = 'account_classification'
      @_hash['account_matching_opt_out'] = 'account_matching_opt_out'
      @_hash['account_number'] = 'account_number'
      @_hash['alternative_bank_account_names'] =
        'alternative_bank_account_names'
      @_hash['alternative_names'] = 'alternative_names'
      @_hash['bank_account_name'] = 'bank_account_name'
      @_hash['bank_id'] = 'bank_id'
      @_hash['bank_id_code'] = 'bank_id_code'
      @_hash['base_currency'] = 'base_currency'
      @_hash['bic'] = 'bic'
      @_hash['country'] = 'country'
      @_hash['customer_id'] = 'customer_id'
      @_hash['first_name'] = 'first_name'
      @_hash['iban'] = 'iban'
      @_hash['joint_account'] = 'joint_account'
      @_hash['name'] = 'name'
      @_hash['name_matching_status'] = 'name_matching_status'
      @_hash['organisation_identification'] = 'organisation_identification'
      @_hash['private_identification'] = 'private_identification'
      @_hash['processing_service'] = 'processing_service'
      @_hash['reference_mask'] = 'reference_mask'
      @_hash['secondary_identification'] = 'secondary_identification'
      @_hash['status'] = 'status'
      @_hash['status_reason'] = 'status_reason'
      @_hash['switched'] = 'switched'
      @_hash['switched_account_details'] = 'switched_account_details'
      @_hash['title'] = 'title'
      @_hash['user_defined_data'] = 'user_defined_data'
      @_hash['user_defined_information'] = 'user_defined_information'
      @_hash['validation_type'] = 'validation_type'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        acceptance_qualifier
        account_classification
        account_matching_opt_out
        account_number
        alternative_bank_account_names
        alternative_names
        bank_account_name
        bank_id
        bank_id_code
        base_currency
        bic
        country
        customer_id
        first_name
        iban
        joint_account
        name
        name_matching_status
        organisation_identification
        private_identification
        processing_service
        reference_mask
        secondary_identification
        status
        status_reason
        switched
        switched_account_details
        title
        user_defined_data
        user_defined_information
        validation_type
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(acceptance_qualifier = SKIP,
                   account_classification = SKIP,
                   account_matching_opt_out = SKIP,
                   account_number = SKIP,
                   alternative_bank_account_names = SKIP,
                   alternative_names = SKIP,
                   bank_account_name = SKIP,
                   bank_id = SKIP,
                   bank_id_code = SKIP,
                   base_currency = SKIP,
                   bic = SKIP,
                   country = SKIP,
                   customer_id = SKIP,
                   first_name = SKIP,
                   iban = SKIP,
                   joint_account = SKIP,
                   name = SKIP,
                   name_matching_status = SKIP,
                   organisation_identification = SKIP,
                   private_identification = SKIP,
                   processing_service = SKIP,
                   reference_mask = SKIP,
                   secondary_identification = SKIP,
                   status = SKIP,
                   status_reason = SKIP,
                   switched = SKIP,
                   switched_account_details = SKIP,
                   title = SKIP,
                   user_defined_data = SKIP,
                   user_defined_information = SKIP,
                   validation_type = SKIP)
      @acceptance_qualifier = acceptance_qualifier unless acceptance_qualifier == SKIP
      @account_classification = account_classification unless account_classification == SKIP
      @account_matching_opt_out = account_matching_opt_out unless account_matching_opt_out == SKIP
      @account_number = account_number unless account_number == SKIP
      unless alternative_bank_account_names == SKIP
        @alternative_bank_account_names =
          alternative_bank_account_names
      end
      @alternative_names = alternative_names unless alternative_names == SKIP
      @bank_account_name = bank_account_name unless bank_account_name == SKIP
      @bank_id = bank_id unless bank_id == SKIP
      @bank_id_code = bank_id_code unless bank_id_code == SKIP
      @base_currency = base_currency unless base_currency == SKIP
      @bic = bic unless bic == SKIP
      @country = country unless country == SKIP
      @customer_id = customer_id unless customer_id == SKIP
      @first_name = first_name unless first_name == SKIP
      @iban = iban unless iban == SKIP
      @joint_account = joint_account unless joint_account == SKIP
      @name = name unless name == SKIP
      @name_matching_status = name_matching_status unless name_matching_status == SKIP
      unless organisation_identification == SKIP
        @organisation_identification =
          organisation_identification
      end
      @private_identification = private_identification unless private_identification == SKIP
      @processing_service = processing_service unless processing_service == SKIP
      @reference_mask = reference_mask unless reference_mask == SKIP
      @secondary_identification = secondary_identification unless secondary_identification == SKIP
      @status = status unless status == SKIP
      @status_reason = status_reason unless status_reason == SKIP
      @switched = switched unless switched == SKIP
      @switched_account_details = switched_account_details unless switched_account_details == SKIP
      @title = title unless title == SKIP
      @user_defined_data = user_defined_data unless user_defined_data == SKIP
      @user_defined_information = user_defined_information unless user_defined_information == SKIP
      @validation_type = validation_type unless validation_type == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      acceptance_qualifier =
        hash.key?('acceptance_qualifier') ? hash['acceptance_qualifier'] : SKIP
      account_classification =
        hash.key?('account_classification') ? hash['account_classification'] : SKIP
      account_matching_opt_out =
        hash.key?('account_matching_opt_out') ? hash['account_matching_opt_out'] : SKIP
      account_number =
        hash.key?('account_number') ? hash['account_number'] : SKIP
      alternative_bank_account_names =
        hash.key?('alternative_bank_account_names') ? hash['alternative_bank_account_names'] : SKIP
      alternative_names =
        hash.key?('alternative_names') ? hash['alternative_names'] : SKIP
      bank_account_name =
        hash.key?('bank_account_name') ? hash['bank_account_name'] : SKIP
      bank_id = hash.key?('bank_id') ? hash['bank_id'] : SKIP
      bank_id_code = hash.key?('bank_id_code') ? hash['bank_id_code'] : SKIP
      base_currency = hash.key?('base_currency') ? hash['base_currency'] : SKIP
      bic = hash.key?('bic') ? hash['bic'] : SKIP
      country = hash.key?('country') ? hash['country'] : SKIP
      customer_id = hash.key?('customer_id') ? hash['customer_id'] : SKIP
      first_name = hash.key?('first_name') ? hash['first_name'] : SKIP
      iban = hash.key?('iban') ? hash['iban'] : SKIP
      joint_account = hash.key?('joint_account') ? hash['joint_account'] : SKIP
      name = hash.key?('name') ? hash['name'] : SKIP
      name_matching_status =
        hash.key?('name_matching_status') ? hash['name_matching_status'] : SKIP
      if hash['organisation_identification']
        organisation_identification = AccountAttributesOrganisationIdentification.from_hash(hash['organisation_identification'])
      end
      if hash['private_identification']
        private_identification = AccountAttributesPrivateIdentification.from_hash(hash['private_identification'])
      end
      processing_service =
        hash.key?('processing_service') ? hash['processing_service'] : SKIP
      reference_mask =
        hash.key?('reference_mask') ? hash['reference_mask'] : SKIP
      secondary_identification =
        hash.key?('secondary_identification') ? hash['secondary_identification'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP
      status_reason = hash.key?('status_reason') ? hash['status_reason'] : SKIP
      switched = hash.key?('switched') ? hash['switched'] : SKIP
      if hash['switched_account_details']
        switched_account_details = SwitchedAccountDetails.from_hash(hash['switched_account_details'])
      end
      title = hash.key?('title') ? hash['title'] : SKIP
      # Parameter is an array, so we need to iterate through it
      user_defined_data = nil
      unless hash['user_defined_data'].nil?
        user_defined_data = []
        hash['user_defined_data'].each do |structure|
          user_defined_data << (UserDefinedData.from_hash(structure) if structure)
        end
      end

      user_defined_data = SKIP unless hash.key?('user_defined_data')
      user_defined_information =
        hash.key?('user_defined_information') ? hash['user_defined_information'] : SKIP
      validation_type =
        hash.key?('validation_type') ? hash['validation_type'] : SKIP

      # Create object from extracted values.
      Attributes.new(acceptance_qualifier,
                     account_classification,
                     account_matching_opt_out,
                     account_number,
                     alternative_bank_account_names,
                     alternative_names,
                     bank_account_name,
                     bank_id,
                     bank_id_code,
                     base_currency,
                     bic,
                     country,
                     customer_id,
                     first_name,
                     iban,
                     joint_account,
                     name,
                     name_matching_status,
                     organisation_identification,
                     private_identification,
                     processing_service,
                     reference_mask,
                     secondary_identification,
                     status,
                     status_reason,
                     switched,
                     switched_account_details,
                     title,
                     user_defined_data,
                     user_defined_information,
                     validation_type)
    end
  end
end
