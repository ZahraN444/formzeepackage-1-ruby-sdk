# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Form3PublicApi
  # ReturnPaymentAttributes Model.
  class ReturnPaymentAttributes < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Block to represent a Financial Institution/agent in the payment chain
    # @return [Array[Agent]]
    attr_accessor :agents

    # The amount to return which should correspond to the amount of the original
    # payment
    # @return [String]
    attr_accessor :amount

    # Unique identifier for organisations collecting payments
    # @return [String]
    attr_accessor :clearing_id

    # ISO currency code for transaction amount
    # @return [String]
    attr_accessor :currency

    # Time a payment was released from being held due to a limit breach
    # @return [DateTime]
    attr_accessor :limit_breach_end_datetime

    # Start time a payment was held due to a limit breach
    # @return [DateTime]
    attr_accessor :limit_breach_start_datetime

    # Start time a payment was held due to a limit breach
    # @return [String]
    attr_accessor :reason

    # The return [reason
    # code](http://draft-api-docs.form3.tech/api.html#enumerations-payment-retur
    # n-codes)
    # @return [String]
    attr_accessor :return_code

    # A unique reference to the return payment instruction. If not supplied, the
    # value is generated by Form3.
    # @return [String]
    attr_accessor :scheme_transaction_id

    # Specifies the details on how the settlement of the transaction between the
    # instructing agent and the instructed agent is completed
    # @return [Settlement]
    attr_accessor :settlement

    # The scheme-specific unique transaction ID. Populated by the scheme.
    # @return [String]
    attr_accessor :unique_scheme_id

    # All purpose list of key-value pairs specific data stored on the return.
    # @return [Array[UserDefinedData]]
    attr_accessor :user_defined_data

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['agents'] = 'agents'
      @_hash['amount'] = 'amount'
      @_hash['clearing_id'] = 'clearing_id'
      @_hash['currency'] = 'currency'
      @_hash['limit_breach_end_datetime'] = 'limit_breach_end_datetime'
      @_hash['limit_breach_start_datetime'] = 'limit_breach_start_datetime'
      @_hash['reason'] = 'reason'
      @_hash['return_code'] = 'return_code'
      @_hash['scheme_transaction_id'] = 'scheme_transaction_id'
      @_hash['settlement'] = 'settlement'
      @_hash['unique_scheme_id'] = 'unique_scheme_id'
      @_hash['user_defined_data'] = 'user_defined_data'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        agents
        amount
        clearing_id
        currency
        limit_breach_end_datetime
        limit_breach_start_datetime
        reason
        return_code
        scheme_transaction_id
        settlement
        unique_scheme_id
        user_defined_data
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(agents = SKIP,
                   amount = SKIP,
                   clearing_id = SKIP,
                   currency = SKIP,
                   limit_breach_end_datetime = SKIP,
                   limit_breach_start_datetime = SKIP,
                   reason = SKIP,
                   return_code = SKIP,
                   scheme_transaction_id = SKIP,
                   settlement = SKIP,
                   unique_scheme_id = SKIP,
                   user_defined_data = SKIP)
      @agents = agents unless agents == SKIP
      @amount = amount unless amount == SKIP
      @clearing_id = clearing_id unless clearing_id == SKIP
      @currency = currency unless currency == SKIP
      unless limit_breach_end_datetime == SKIP
        @limit_breach_end_datetime =
          limit_breach_end_datetime
      end
      unless limit_breach_start_datetime == SKIP
        @limit_breach_start_datetime =
          limit_breach_start_datetime
      end
      @reason = reason unless reason == SKIP
      @return_code = return_code unless return_code == SKIP
      @scheme_transaction_id = scheme_transaction_id unless scheme_transaction_id == SKIP
      @settlement = settlement unless settlement == SKIP
      @unique_scheme_id = unique_scheme_id unless unique_scheme_id == SKIP
      @user_defined_data = user_defined_data unless user_defined_data == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      agents = nil
      unless hash['agents'].nil?
        agents = []
        hash['agents'].each do |structure|
          agents << (Agent.from_hash(structure) if structure)
        end
      end

      agents = SKIP unless hash.key?('agents')
      amount = hash.key?('amount') ? hash['amount'] : SKIP
      clearing_id = hash.key?('clearing_id') ? hash['clearing_id'] : SKIP
      currency = hash.key?('currency') ? hash['currency'] : SKIP
      limit_breach_end_datetime = if hash.key?('limit_breach_end_datetime')
                                    (DateTimeHelper.from_rfc3339(hash['limit_breach_end_datetime']) if hash['limit_breach_end_datetime'])
                                  else
                                    SKIP
                                  end
      limit_breach_start_datetime = if hash.key?('limit_breach_start_datetime')
                                      (DateTimeHelper.from_rfc3339(hash['limit_breach_start_datetime']) if hash['limit_breach_start_datetime'])
                                    else
                                      SKIP
                                    end
      reason = hash.key?('reason') ? hash['reason'] : SKIP
      return_code = hash.key?('return_code') ? hash['return_code'] : SKIP
      scheme_transaction_id =
        hash.key?('scheme_transaction_id') ? hash['scheme_transaction_id'] : SKIP
      settlement = Settlement.from_hash(hash['settlement']) if hash['settlement']
      unique_scheme_id =
        hash.key?('unique_scheme_id') ? hash['unique_scheme_id'] : SKIP
      # Parameter is an array, so we need to iterate through it
      user_defined_data = nil
      unless hash['user_defined_data'].nil?
        user_defined_data = []
        hash['user_defined_data'].each do |structure|
          user_defined_data << (UserDefinedData.from_hash(structure) if structure)
        end
      end

      user_defined_data = SKIP unless hash.key?('user_defined_data')

      # Create object from extracted values.
      ReturnPaymentAttributes.new(agents,
                                  amount,
                                  clearing_id,
                                  currency,
                                  limit_breach_end_datetime,
                                  limit_breach_start_datetime,
                                  reason,
                                  return_code,
                                  scheme_transaction_id,
                                  settlement,
                                  unique_scheme_id,
                                  user_defined_data)
    end

    def to_custom_limit_breach_end_datetime
      DateTimeHelper.to_rfc3339(limit_breach_end_datetime)
    end

    def to_custom_limit_breach_start_datetime
      DateTimeHelper.to_rfc3339(limit_breach_start_datetime)
    end
  end
end
