# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # Attributes57 Model.
  class Attributes57 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Block to represent a Financial Institution/agent in the payment chain
    # @return [Array[Agent]]
    attr_accessor :agents

    # Answer to the recall request. Can either be `accepted` or `rejected`.
    # @return [RecallDecisionAnswerEnum]
    attr_accessor :answer

    # Answer to the recall request. Can either be `accepted` or `rejected`.
    # @return [CurrencyAndAmount]
    attr_accessor :charges_amount

    # Optional free text reason in addition to `reason_code`
    # @return [String]
    attr_accessor :reason

    # Reason for a rejected decision. Required when answer is rejected, ignored
    # otherwise. Has to be a valid [rejected recall decision reason
    # code](http://api-docs.form3.tech/api.html#enumerations-rejected-recall-dec
    # ision-reason-codes)
    # @return [String]
    attr_accessor :reason_code

    # Reason for a rejected decision. Required when answer is rejected, ignored
    # otherwise. Has to be a valid [rejected recall decision reason
    # code](http://api-docs.form3.tech/api.html#enumerations-rejected-recall-dec
    # ision-reason-codes)
    # @return [CurrencyAndAmount]
    attr_accessor :recall_amount

    # Reason for a rejected decision. Required when answer is rejected, ignored
    # otherwise. Has to be a valid [rejected recall decision reason
    # code](http://api-docs.form3.tech/api.html#enumerations-rejected-recall-dec
    # ision-reason-codes)
    # @return [ResolutionRelatedInformation]
    attr_accessor :resolution_related_information

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['agents'] = 'agents'
      @_hash['answer'] = 'answer'
      @_hash['charges_amount'] = 'charges_amount'
      @_hash['reason'] = 'reason'
      @_hash['reason_code'] = 'reason_code'
      @_hash['recall_amount'] = 'recall_amount'
      @_hash['resolution_related_information'] =
        'resolution_related_information'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        agents
        answer
        charges_amount
        reason
        reason_code
        recall_amount
        resolution_related_information
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(agents = SKIP,
                   answer = SKIP,
                   charges_amount = SKIP,
                   reason = SKIP,
                   reason_code = SKIP,
                   recall_amount = SKIP,
                   resolution_related_information = SKIP)
      @agents = agents unless agents == SKIP
      @answer = answer unless answer == SKIP
      @charges_amount = charges_amount unless charges_amount == SKIP
      @reason = reason unless reason == SKIP
      @reason_code = reason_code unless reason_code == SKIP
      @recall_amount = recall_amount unless recall_amount == SKIP
      unless resolution_related_information == SKIP
        @resolution_related_information =
          resolution_related_information
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      agents = nil
      unless hash['agents'].nil?
        agents = []
        hash['agents'].each do |structure|
          agents << (Agent.from_hash(structure) if structure)
        end
      end

      agents = SKIP unless hash.key?('agents')
      answer = hash.key?('answer') ? hash['answer'] : SKIP
      charges_amount = CurrencyAndAmount.from_hash(hash['charges_amount']) if
        hash['charges_amount']
      reason = hash.key?('reason') ? hash['reason'] : SKIP
      reason_code = hash.key?('reason_code') ? hash['reason_code'] : SKIP
      recall_amount = CurrencyAndAmount.from_hash(hash['recall_amount']) if hash['recall_amount']
      if hash['resolution_related_information']
        resolution_related_information = ResolutionRelatedInformation.from_hash(hash['resolution_related_information'])
      end

      # Create object from extracted values.
      Attributes57.new(agents,
                       answer,
                       charges_amount,
                       reason,
                       reason_code,
                       recall_amount,
                       resolution_related_information)
    end
  end
end
