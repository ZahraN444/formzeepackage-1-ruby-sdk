# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # Set of elements used to further specify the type of transaction.
  class PaymentTypeInformation < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Amount of money to be moved between the debtor and creditor, before
    # deduction of charges.
    # @return [String]
    attr_accessor :amount

    # Specifies the high level purpose of the instruction based on a set of
    # pre-defined categories.
    # @return [String]
    attr_accessor :category_purpose

    # Currency of the transaction amount. Currency code as defined in [ISO
    # 4217](https://www.iso.org/iso/home/standards/currency_codes.htm)
    # @return [String]
    attr_accessor :currency

    # Underlying reason for the payment transaction. Defined in external code
    # list (4 char) or proprietary code (35 char)
    # @return [String]
    attr_accessor :payment_purpose

    # Date on which the amount of money ceases to be available to the agent that
    # owes it and when the amount of money becomes available to the agent to
    # which it is due.
    # @return [Date]
    attr_accessor :processing_date

    # Unstructured information supplied to enable the matching/reconciliation of
    # an entry with the items that the payment is intended to settle.
    # @return [String]
    attr_accessor :remittance_information

    # Specifies a local instrument to further qualify the level of service.
    # @return [String]
    attr_accessor :scheme_payment_sub_type

    # Specifies a pre-agreed level of service as published in an external code
    # list (4 char) or a proprietary code (35 char).
    # @return [String]
    attr_accessor :scheme_payment_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['amount'] = 'amount'
      @_hash['category_purpose'] = 'category_purpose'
      @_hash['currency'] = 'currency'
      @_hash['payment_purpose'] = 'payment_purpose'
      @_hash['processing_date'] = 'processing_date'
      @_hash['remittance_information'] = 'remittance_information'
      @_hash['scheme_payment_sub_type'] = 'scheme_payment_sub_type'
      @_hash['scheme_payment_type'] = 'scheme_payment_type'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        amount
        category_purpose
        currency
        payment_purpose
        processing_date
        remittance_information
        scheme_payment_sub_type
        scheme_payment_type
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(amount = SKIP,
                   category_purpose = SKIP,
                   currency = SKIP,
                   payment_purpose = SKIP,
                   processing_date = SKIP,
                   remittance_information = SKIP,
                   scheme_payment_sub_type = SKIP,
                   scheme_payment_type = SKIP)
      @amount = amount unless amount == SKIP
      @category_purpose = category_purpose unless category_purpose == SKIP
      @currency = currency unless currency == SKIP
      @payment_purpose = payment_purpose unless payment_purpose == SKIP
      @processing_date = processing_date unless processing_date == SKIP
      @remittance_information = remittance_information unless remittance_information == SKIP
      @scheme_payment_sub_type = scheme_payment_sub_type unless scheme_payment_sub_type == SKIP
      @scheme_payment_type = scheme_payment_type unless scheme_payment_type == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      amount = hash.key?('amount') ? hash['amount'] : SKIP
      category_purpose =
        hash.key?('category_purpose') ? hash['category_purpose'] : SKIP
      currency = hash.key?('currency') ? hash['currency'] : SKIP
      payment_purpose =
        hash.key?('payment_purpose') ? hash['payment_purpose'] : SKIP
      processing_date =
        hash.key?('processing_date') ? hash['processing_date'] : SKIP
      remittance_information =
        hash.key?('remittance_information') ? hash['remittance_information'] : SKIP
      scheme_payment_sub_type =
        hash.key?('scheme_payment_sub_type') ? hash['scheme_payment_sub_type'] : SKIP
      scheme_payment_type =
        hash.key?('scheme_payment_type') ? hash['scheme_payment_type'] : SKIP

      # Create object from extracted values.
      PaymentTypeInformation.new(amount,
                                 category_purpose,
                                 currency,
                                 payment_purpose,
                                 processing_date,
                                 remittance_information,
                                 scheme_payment_sub_type,
                                 scheme_payment_type)
    end
  end
end
