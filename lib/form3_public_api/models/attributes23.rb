# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # Attributes23 Model.
  class Attributes23 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Amount of money moved between the instructing agent and instructed agent
    # @return [String]
    attr_accessor :amount

    # Amount of money moved between the instructing agent and instructed agent
    # @return [BeneficiaryParty3]
    attr_accessor :beneficiary_party

    # Category purpose in proprietary form. Specifies the high level purpose of
    # the instruction. Cannot be used at the same time as
    # `category_purpose_coded`.
    # @return [String]
    attr_accessor :category_purpose

    # Category purpose in a coded form. Specifies the high level purpose of the
    # instruction. Cannot be used at the same time as `category_purpose`.
    # @return [String]
    attr_accessor :category_purpose_coded

    # Unique identifier for organisations collecting payments
    # @return [String]
    attr_accessor :clearing_id

    # Currency of the transaction amount. Currency code as defined in [ISO
    # 4217](http://www.iso.org/iso/home/standards/currency_codes.htm)
    # @return [String]
    attr_accessor :currency

    # Currency of the transaction amount. Currency code as defined in [ISO
    # 4217](http://www.iso.org/iso/home/standards/currency_codes.htm)
    # @return [DebtorParty2]
    attr_accessor :debtor_party

    # Unique identification, as assigned by the initiating party, to
    # unambiguously identify the transaction. This identification is passed on,
    # unchanged, throughout the entire end-to-end chain.
    # @return [String]
    attr_accessor :end_to_end_reference

    # Unique identification, as assigned by the initiating party to
    # unambiguously identify the transaction. This identification is an
    # point-to-point reference and is passed on, unchanged, throughout the
    # entire chain. Cannot include leading, trailing or internal spaces.
    # @return [String]
    attr_accessor :instruction_id

    # Indicator notifying whether the underlying mandate is amended or not
    # @return [TrueClass | FalseClass]
    attr_accessor :mandate_amendment_indicator

    # Original mandate id.
    # @return [String]
    attr_accessor :mandate_id

    # Date on which the direct debit mandate has been signed by the debtor.
    # @return [Date]
    attr_accessor :mandate_signature_date

    # Numeric reference field, see scheme specific descriptions for usage
    # @return [String]
    attr_accessor :numeric_reference

    # Purpose of the direct debit in a coded form
    # @return [String]
    attr_accessor :payment_purpose_coded

    # Clearing infrastructure through which the operation instruction is to be
    # processed. Default for given organisation ID is used if left empty. Has to
    # be a valid [scheme
    # identifier](http://draft-api-docs.form3.tech/api.html#enumerations-schemes
    # ).
    # @return [String]
    attr_accessor :payment_scheme

    # Date on which the operation is to be debited from the debtor account.
    # Formatted according to ISO 8601 format: YYYY-MM-DD.
    # @return [Date]
    attr_accessor :processing_date

    # Payment reference for beneficiary use
    # @return [String]
    attr_accessor :reference

    # Information supplied to enable the matching of an entry with the items
    # that the transfer is intended to settle, such as commercial invoices in an
    # accounts receivable system provided by the debtor for the beneficiary.
    # @return [String]
    attr_accessor :remittance_information

    # The [scheme-specific payment type](#enumerations-scheme-payment-types)
    # @return [String]
    attr_accessor :scheme_payment_type

    # Date on which the operation is processed by the scheme. Formatted
    # according to ISO 8601 format: YYYY-MM-DD. Only used if different from
    # `processing_date`.
    # @return [Date]
    attr_accessor :scheme_processing_date

    # This reference is used by the receiving party to identify whether the
    # related DDI would have been electronic (AUDDIS) or paper‐based.
    # @return [SchemeStatusEnum]
    attr_accessor :scheme_status

    # Unique identification, as assigned by the first instructing agent, to
    # unambiguously identify the transaction that is passed on, unchanged,
    # throughout the entire interbank chain.
    # @return [String]
    attr_accessor :scheme_transaction_id

    # Specifies the details on how the settlement of the transaction between the
    # instructing agent and the instructed agent is completed
    # @return [Settlement]
    attr_accessor :settlement

    # Specifies the details on how the settlement of the transaction between the
    # instructing agent and the instructed agent is completed
    # @return [StructuredReference]
    attr_accessor :structured_reference

    # Specifies the details on how the settlement of the transaction between the
    # instructing agent and the instructed agent is completed
    # @return [UltimateEntity]
    attr_accessor :ultimate_beneficiary

    # Specifies the details on how the settlement of the transaction between the
    # instructing agent and the instructed agent is completed
    # @return [UltimateEntity]
    attr_accessor :ultimate_debtor

    # The scheme-specific unique transaction ID. Populated by the scheme.
    # @return [String]
    attr_accessor :unique_scheme_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['amount'] = 'amount'
      @_hash['beneficiary_party'] = 'beneficiary_party'
      @_hash['category_purpose'] = 'category_purpose'
      @_hash['category_purpose_coded'] = 'category_purpose_coded'
      @_hash['clearing_id'] = 'clearing_id'
      @_hash['currency'] = 'currency'
      @_hash['debtor_party'] = 'debtor_party'
      @_hash['end_to_end_reference'] = 'end_to_end_reference'
      @_hash['instruction_id'] = 'instruction_id'
      @_hash['mandate_amendment_indicator'] = 'mandate_amendment_indicator'
      @_hash['mandate_id'] = 'mandate_id'
      @_hash['mandate_signature_date'] = 'mandate_signature_date'
      @_hash['numeric_reference'] = 'numeric_reference'
      @_hash['payment_purpose_coded'] = 'payment_purpose_coded'
      @_hash['payment_scheme'] = 'payment_scheme'
      @_hash['processing_date'] = 'processing_date'
      @_hash['reference'] = 'reference'
      @_hash['remittance_information'] = 'remittance_information'
      @_hash['scheme_payment_type'] = 'scheme_payment_type'
      @_hash['scheme_processing_date'] = 'scheme_processing_date'
      @_hash['scheme_status'] = 'scheme_status'
      @_hash['scheme_transaction_id'] = 'scheme_transaction_id'
      @_hash['settlement'] = 'settlement'
      @_hash['structured_reference'] = 'structured_reference'
      @_hash['ultimate_beneficiary'] = 'ultimate_beneficiary'
      @_hash['ultimate_debtor'] = 'ultimate_debtor'
      @_hash['unique_scheme_id'] = 'unique_scheme_id'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        amount
        beneficiary_party
        category_purpose
        category_purpose_coded
        clearing_id
        currency
        debtor_party
        end_to_end_reference
        instruction_id
        mandate_amendment_indicator
        mandate_id
        mandate_signature_date
        numeric_reference
        payment_purpose_coded
        payment_scheme
        processing_date
        reference
        remittance_information
        scheme_payment_type
        scheme_processing_date
        scheme_status
        scheme_transaction_id
        settlement
        structured_reference
        ultimate_beneficiary
        ultimate_debtor
        unique_scheme_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(amount = SKIP,
                   beneficiary_party = SKIP,
                   category_purpose = SKIP,
                   category_purpose_coded = SKIP,
                   clearing_id = SKIP,
                   currency = SKIP,
                   debtor_party = SKIP,
                   end_to_end_reference = SKIP,
                   instruction_id = SKIP,
                   mandate_amendment_indicator = SKIP,
                   mandate_id = SKIP,
                   mandate_signature_date = SKIP,
                   numeric_reference = SKIP,
                   payment_purpose_coded = SKIP,
                   payment_scheme = SKIP,
                   processing_date = SKIP,
                   reference = SKIP,
                   remittance_information = SKIP,
                   scheme_payment_type = SKIP,
                   scheme_processing_date = SKIP,
                   scheme_status = SKIP,
                   scheme_transaction_id = SKIP,
                   settlement = SKIP,
                   structured_reference = SKIP,
                   ultimate_beneficiary = SKIP,
                   ultimate_debtor = SKIP,
                   unique_scheme_id = SKIP)
      @amount = amount unless amount == SKIP
      @beneficiary_party = beneficiary_party unless beneficiary_party == SKIP
      @category_purpose = category_purpose unless category_purpose == SKIP
      @category_purpose_coded = category_purpose_coded unless category_purpose_coded == SKIP
      @clearing_id = clearing_id unless clearing_id == SKIP
      @currency = currency unless currency == SKIP
      @debtor_party = debtor_party unless debtor_party == SKIP
      @end_to_end_reference = end_to_end_reference unless end_to_end_reference == SKIP
      @instruction_id = instruction_id unless instruction_id == SKIP
      unless mandate_amendment_indicator == SKIP
        @mandate_amendment_indicator =
          mandate_amendment_indicator
      end
      @mandate_id = mandate_id unless mandate_id == SKIP
      @mandate_signature_date = mandate_signature_date unless mandate_signature_date == SKIP
      @numeric_reference = numeric_reference unless numeric_reference == SKIP
      @payment_purpose_coded = payment_purpose_coded unless payment_purpose_coded == SKIP
      @payment_scheme = payment_scheme unless payment_scheme == SKIP
      @processing_date = processing_date unless processing_date == SKIP
      @reference = reference unless reference == SKIP
      @remittance_information = remittance_information unless remittance_information == SKIP
      @scheme_payment_type = scheme_payment_type unless scheme_payment_type == SKIP
      @scheme_processing_date = scheme_processing_date unless scheme_processing_date == SKIP
      @scheme_status = scheme_status unless scheme_status == SKIP
      @scheme_transaction_id = scheme_transaction_id unless scheme_transaction_id == SKIP
      @settlement = settlement unless settlement == SKIP
      @structured_reference = structured_reference unless structured_reference == SKIP
      @ultimate_beneficiary = ultimate_beneficiary unless ultimate_beneficiary == SKIP
      @ultimate_debtor = ultimate_debtor unless ultimate_debtor == SKIP
      @unique_scheme_id = unique_scheme_id unless unique_scheme_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      amount = hash.key?('amount') ? hash['amount'] : SKIP
      beneficiary_party = BeneficiaryParty3.from_hash(hash['beneficiary_party']) if
        hash['beneficiary_party']
      category_purpose =
        hash.key?('category_purpose') ? hash['category_purpose'] : SKIP
      category_purpose_coded =
        hash.key?('category_purpose_coded') ? hash['category_purpose_coded'] : SKIP
      clearing_id = hash.key?('clearing_id') ? hash['clearing_id'] : SKIP
      currency = hash.key?('currency') ? hash['currency'] : SKIP
      debtor_party = DebtorParty2.from_hash(hash['debtor_party']) if hash['debtor_party']
      end_to_end_reference =
        hash.key?('end_to_end_reference') ? hash['end_to_end_reference'] : SKIP
      instruction_id =
        hash.key?('instruction_id') ? hash['instruction_id'] : SKIP
      mandate_amendment_indicator =
        hash.key?('mandate_amendment_indicator') ? hash['mandate_amendment_indicator'] : SKIP
      mandate_id = hash.key?('mandate_id') ? hash['mandate_id'] : SKIP
      mandate_signature_date =
        hash.key?('mandate_signature_date') ? hash['mandate_signature_date'] : SKIP
      numeric_reference =
        hash.key?('numeric_reference') ? hash['numeric_reference'] : SKIP
      payment_purpose_coded =
        hash.key?('payment_purpose_coded') ? hash['payment_purpose_coded'] : SKIP
      payment_scheme =
        hash.key?('payment_scheme') ? hash['payment_scheme'] : SKIP
      processing_date =
        hash.key?('processing_date') ? hash['processing_date'] : SKIP
      reference = hash.key?('reference') ? hash['reference'] : SKIP
      remittance_information =
        hash.key?('remittance_information') ? hash['remittance_information'] : SKIP
      scheme_payment_type =
        hash.key?('scheme_payment_type') ? hash['scheme_payment_type'] : SKIP
      scheme_processing_date =
        hash.key?('scheme_processing_date') ? hash['scheme_processing_date'] : SKIP
      scheme_status = hash.key?('scheme_status') ? hash['scheme_status'] : SKIP
      scheme_transaction_id =
        hash.key?('scheme_transaction_id') ? hash['scheme_transaction_id'] : SKIP
      settlement = Settlement.from_hash(hash['settlement']) if hash['settlement']
      structured_reference = StructuredReference.from_hash(hash['structured_reference']) if
        hash['structured_reference']
      ultimate_beneficiary = UltimateEntity.from_hash(hash['ultimate_beneficiary']) if
        hash['ultimate_beneficiary']
      ultimate_debtor = UltimateEntity.from_hash(hash['ultimate_debtor']) if
        hash['ultimate_debtor']
      unique_scheme_id =
        hash.key?('unique_scheme_id') ? hash['unique_scheme_id'] : SKIP

      # Create object from extracted values.
      Attributes23.new(amount,
                       beneficiary_party,
                       category_purpose,
                       category_purpose_coded,
                       clearing_id,
                       currency,
                       debtor_party,
                       end_to_end_reference,
                       instruction_id,
                       mandate_amendment_indicator,
                       mandate_id,
                       mandate_signature_date,
                       numeric_reference,
                       payment_purpose_coded,
                       payment_scheme,
                       processing_date,
                       reference,
                       remittance_information,
                       scheme_payment_type,
                       scheme_processing_date,
                       scheme_status,
                       scheme_transaction_id,
                       settlement,
                       structured_reference,
                       ultimate_beneficiary,
                       ultimate_debtor,
                       unique_scheme_id)
    end
  end
end
