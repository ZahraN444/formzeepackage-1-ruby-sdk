# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # NameVerificationAPIController
  class NameVerificationAPIController < BaseController
    # List name verifications
    # @param [Integer] page_number Optional parameter: Which page to select
    # @param [Integer] page_size Optional parameter: Number of items to select
    # @param [UUID | String] filter_organisation_id Optional parameter: Filter
    # by organisation id
    # @param [String] filter_account_classification Optional parameter: Filter
    # by account classification
    # @param [String] filter_account_number Optional parameter: Filter by
    # account number
    # @param [String] filter_bank_id Optional parameter: Filter by bank id
    # @param [String] filter_bank_id_code Optional parameter: Filter by bank id
    # code
    # @param [Array[String]] filter_name Optional parameter: Filter by name
    # @param [String] filter_secondary_identification Optional parameter: Filter
    # by secondary identification
    # @param [DateTime] filter_created_date_from Optional parameter: Filter by
    # created date from
    # @param [DateTime] filter_created_date_to Optional parameter: Filter by
    # created date to
    # @param [DateTime] filter_modified_date_from Optional parameter: Filter by
    # modified date from
    # @param [DateTime] filter_modified_date_to Optional parameter: Filter by
    # modified date to
    # @param [DateTime] filter_admission_created_date_from Optional parameter:
    # Filter by admission created date from
    # @param [DateTime] filter_admission_created_date_to Optional parameter:
    # Filter by admission created date to
    # @param [DateTime] filter_admission_modified_date_from Optional parameter:
    # Filter by admission modified date from
    # @param [DateTime] filter_admission_modified_date_to Optional parameter:
    # Filter by admission modified date to
    # @param [String] filter_admission_status Optional parameter: Filter by
    # admission status
    # @param [String] filter_admission_answer Optional parameter: Filter by
    # admission answer
    # @param [String] filter_admission_actual_name Optional parameter: Filter by
    # admission actual name
    # @param [String] filter_admission_reason Optional parameter: Filter by
    # admission reason
    # @param [String] filter_admission_reason_code Optional parameter: Filter by
    # admission reason code
    # @param [DateTime] filter_submission_created_date_from Optional parameter:
    # Filter by submission created date from
    # @param [DateTime] filter_submission_created_date_to Optional parameter:
    # Filter by submission created date to
    # @param [DateTime] filter_submission_modified_date_from Optional parameter:
    # Filter by submission modified date from
    # @param [DateTime] filter_submission_modified_date_to Optional parameter:
    # Filter by submission modified date to
    # @param [String] filter_submission_status Optional parameter: Filter by
    # submission status
    # @param [String] filter_submission_answer Optional parameter: Filter by
    # submission answer
    # @param [String] filter_submission_actual_name Optional parameter: Filter
    # by submission actual name
    # @param [String] filter_submission_reason Optional parameter: Filter by
    # submission reason
    # @param [String] filter_submission_reason_code Optional parameter: Filter
    # by submission reason code
    # @return [NameVerificationDetailsListResponse] response from the API call
    def list_name_verifications(page_number: nil,
                                page_size: nil,
                                filter_organisation_id: nil,
                                filter_account_classification: nil,
                                filter_account_number: nil,
                                filter_bank_id: nil,
                                filter_bank_id_code: nil,
                                filter_name: nil,
                                filter_secondary_identification: nil,
                                filter_created_date_from: nil,
                                filter_created_date_to: nil,
                                filter_modified_date_from: nil,
                                filter_modified_date_to: nil,
                                filter_admission_created_date_from: nil,
                                filter_admission_created_date_to: nil,
                                filter_admission_modified_date_from: nil,
                                filter_admission_modified_date_to: nil,
                                filter_admission_status: nil,
                                filter_admission_answer: nil,
                                filter_admission_actual_name: nil,
                                filter_admission_reason: nil,
                                filter_admission_reason_code: nil,
                                filter_submission_created_date_from: nil,
                                filter_submission_created_date_to: nil,
                                filter_submission_modified_date_from: nil,
                                filter_submission_modified_date_to: nil,
                                filter_submission_status: nil,
                                filter_submission_answer: nil,
                                filter_submission_actual_name: nil,
                                filter_submission_reason: nil,
                                filter_submission_reason_code: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/organisation/nameverifications',
                                     Server::DEFAULT)
                   .query_param(new_parameter(page_number, key: 'page[number]'))
                   .query_param(new_parameter(page_size, key: 'page[size]'))
                   .query_param(new_parameter(filter_organisation_id, key: 'filter[organisation_id]'))
                   .query_param(new_parameter(filter_account_classification, key: 'filter[account_classification]'))
                   .query_param(new_parameter(filter_account_number, key: 'filter[account_number]'))
                   .query_param(new_parameter(filter_bank_id, key: 'filter[bank_id]'))
                   .query_param(new_parameter(filter_bank_id_code, key: 'filter[bank_id_code]'))
                   .query_param(new_parameter(filter_name, key: 'filter[name]'))
                   .query_param(new_parameter(filter_secondary_identification, key: 'filter[secondary_identification]'))
                   .query_param(new_parameter(filter_created_date_from, key: 'filter[created_date_from]'))
                   .query_param(new_parameter(filter_created_date_to, key: 'filter[created_date_to]'))
                   .query_param(new_parameter(filter_modified_date_from, key: 'filter[modified_date_from]'))
                   .query_param(new_parameter(filter_modified_date_to, key: 'filter[modified_date_to]'))
                   .query_param(new_parameter(filter_admission_created_date_from, key: 'filter[admission.created_date_from]'))
                   .query_param(new_parameter(filter_admission_created_date_to, key: 'filter[admission.created_date_to]'))
                   .query_param(new_parameter(filter_admission_modified_date_from, key: 'filter[admission.modified_date_from]'))
                   .query_param(new_parameter(filter_admission_modified_date_to, key: 'filter[admission.modified_date_to]'))
                   .query_param(new_parameter(filter_admission_status, key: 'filter[admission.status]'))
                   .query_param(new_parameter(filter_admission_answer, key: 'filter[admission.answer]'))
                   .query_param(new_parameter(filter_admission_actual_name, key: 'filter[admission.actual_name]'))
                   .query_param(new_parameter(filter_admission_reason, key: 'filter[admission.reason]'))
                   .query_param(new_parameter(filter_admission_reason_code, key: 'filter[admission.reason_code]'))
                   .query_param(new_parameter(filter_submission_created_date_from, key: 'filter[submission.created_date_from]'))
                   .query_param(new_parameter(filter_submission_created_date_to, key: 'filter[submission.created_date_to]'))
                   .query_param(new_parameter(filter_submission_modified_date_from, key: 'filter[submission.modified_date_from]'))
                   .query_param(new_parameter(filter_submission_modified_date_to, key: 'filter[submission.modified_date_to]'))
                   .query_param(new_parameter(filter_submission_status, key: 'filter[submission.status]'))
                   .query_param(new_parameter(filter_submission_answer, key: 'filter[submission.answer]'))
                   .query_param(new_parameter(filter_submission_actual_name, key: 'filter[submission.actual_name]'))
                   .query_param(new_parameter(filter_submission_reason, key: 'filter[submission.reason]'))
                   .query_param(new_parameter(filter_submission_reason_code, key: 'filter[submission.reason_code]'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(NameVerificationDetailsListResponse.method(:from_hash))
                   .local_error('400',
                                'Bad Request',
                                ApiErrorException)
                   .local_error('403',
                                'Forbidden',
                                ApiErrorException)
                   .local_error('404',
                                'Not Found',
                                ApiErrorException)
                   .local_error('500',
                                'Internal Server Error',
                                ApiErrorException))
        .execute
    end

    # Name verification creation request
    # @param [NameVerificationCreation] name_verification_creation_request
    # Optional parameter: Example:
    # @return [NameVerificationCreationResponse] response from the API call
    def name_verification_creation_request(name_verification_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/organisation/nameverifications',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(name_verification_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(NameVerificationCreationResponse.method(:from_hash))
                   .local_error('400',
                                'Bad Request',
                                ApiErrorException)
                   .local_error('403',
                                'Forbidden',
                                ApiErrorException)
                   .local_error('409',
                                'Conflict',
                                ApiErrorException)
                   .local_error('500',
                                'Internal Server Error',
                                ApiErrorException))
        .execute
    end

    # Fetch name verification resource
    # @param [UUID | String] id Required parameter: Name Verification ID
    # @return [NameVerificationDetailsResponse] response from the API call
    def fetch_name_verification_resource(id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/organisation/nameverifications/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(NameVerificationDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Bad Request',
                                ApiErrorException)
                   .local_error('403',
                                'Forbidden',
                                ApiErrorException)
                   .local_error('404',
                                'Not Found',
                                ApiErrorException)
                   .local_error('500',
                                'Internal Server Error',
                                ApiErrorException))
        .execute
    end

    # Name verification admission fetch request
    # @param [UUID | String] name_verification_id Required parameter: Example:
    # @param [UUID | String] id Required parameter: Example:
    # @return [NameVerificationAdmissionDetailsResponse] response from the API call
    def name_verification_admission_fetch_request(name_verification_id,
                                                  id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/organisation/nameverifications/{name_verification_id}/admissions/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(name_verification_id, key: 'name_verification_id')
                                    .should_encode(true))
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(NameVerificationAdmissionDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Bad Request',
                                ApiErrorException)
                   .local_error('403',
                                'Forbidden',
                                ApiErrorException)
                   .local_error('404',
                                'Not Found',
                                ApiErrorException)
                   .local_error('500',
                                'Internal Server Error',
                                ApiErrorException))
        .execute
    end
  end
end
