# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # ClaimsController
  class ClaimsController < BaseController
    # List claims
    # @param [Integer] page_number Optional parameter: Which page to select
    # @param [Integer] page_size Optional parameter: Number of items to select
    # @param [Array[UUID | String]] filter_organisation_id Optional parameter:
    # Filter by organisation id
    # @param [String] filter_payment_scheme Optional parameter: Example:
    # @param [String] filter_clearing_id Optional parameter: Example:
    # @param [String] filter_reference Optional parameter: Example:
    # @param [String] filter_reason_code Optional parameter: Example:
    # @param [String] filter_contact_name Optional parameter: Example:
    # @param [String] filter_debtor_party_account_number Optional parameter:
    # Example:
    # @param [String] filter_debtor_party_bank_id Optional parameter: Example:
    # @param [String] filter_beneficiary_party_account_number Optional
    # parameter: Example:
    # @param [String] filter_beneficiary_party_bank_id Optional parameter:
    # Example:
    # @param [String] filter_original_instruction_reference Optional parameter:
    # Example:
    # @param [String] filter_submission_status Optional parameter: Example:
    # @param [DateTime] filter_submission_submission_date_from Optional
    # parameter: Example:
    # @param [DateTime] filter_submission_submission_date_to Optional parameter:
    # Example:
    # @param [String] filter_reversal_status Optional parameter: Example:
    # @param [DateTime] filter_reversal_submission_date_from Optional parameter:
    # Example:
    # @param [DateTime] filter_reversal_submission_date_to Optional parameter:
    # Example:
    # @return [ClaimDetailsListResponse] response from the API call
    def list_claims(page_number: nil,
                    page_size: nil,
                    filter_organisation_id: nil,
                    filter_payment_scheme: nil,
                    filter_clearing_id: nil,
                    filter_reference: nil,
                    filter_reason_code: nil,
                    filter_contact_name: nil,
                    filter_debtor_party_account_number: nil,
                    filter_debtor_party_bank_id: nil,
                    filter_beneficiary_party_account_number: nil,
                    filter_beneficiary_party_bank_id: nil,
                    filter_original_instruction_reference: nil,
                    filter_submission_status: nil,
                    filter_submission_submission_date_from: nil,
                    filter_submission_submission_date_to: nil,
                    filter_reversal_status: nil,
                    filter_reversal_submission_date_from: nil,
                    filter_reversal_submission_date_to: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/claims',
                                     Server::DEFAULT)
                   .query_param(new_parameter(page_number, key: 'page[number]'))
                   .query_param(new_parameter(page_size, key: 'page[size]'))
                   .query_param(new_parameter(filter_organisation_id, key: 'filter[organisation_id]'))
                   .query_param(new_parameter(filter_payment_scheme, key: 'filter[payment_scheme]'))
                   .query_param(new_parameter(filter_clearing_id, key: 'filter[clearing_id]'))
                   .query_param(new_parameter(filter_reference, key: 'filter[reference]'))
                   .query_param(new_parameter(filter_reason_code, key: 'filter[reason_code]'))
                   .query_param(new_parameter(filter_contact_name, key: 'filter[contact_name]'))
                   .query_param(new_parameter(filter_debtor_party_account_number, key: 'filter[debtor_party.account_number]'))
                   .query_param(new_parameter(filter_debtor_party_bank_id, key: 'filter[debtor_party.bank_id]'))
                   .query_param(new_parameter(filter_beneficiary_party_account_number, key: 'filter[beneficiary_party.account_number]'))
                   .query_param(new_parameter(filter_beneficiary_party_bank_id, key: 'filter[beneficiary_party.bank_id]'))
                   .query_param(new_parameter(filter_original_instruction_reference, key: 'filter[original_instruction.reference]'))
                   .query_param(new_parameter(filter_submission_status, key: 'filter[submission.status]'))
                   .query_param(new_parameter(filter_submission_submission_date_from, key: 'filter[submission.submission_date_from]'))
                   .query_param(new_parameter(filter_submission_submission_date_to, key: 'filter[submission.submission_date_to]'))
                   .query_param(new_parameter(filter_reversal_status, key: 'filter[reversal.status]'))
                   .query_param(new_parameter(filter_reversal_submission_date_from, key: 'filter[reversal.submission_date_from]'))
                   .query_param(new_parameter(filter_reversal_submission_date_to, key: 'filter[reversal.submission_date_to]'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ClaimDetailsListResponse.method(:from_hash)))
        .execute
    end

    # Create Claim
    # @param [ClaimCreation] claim_creation_request Optional parameter:
    # Example:
    # @return [ClaimDetailsResponse] response from the API call
    def create_claim(claim_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/transaction/claims',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(claim_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ClaimDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Claim creation error',
                                ApiErrorException))
        .execute
    end

    # Fetch claim
    # @param [UUID | String] id Required parameter: Claim Id
    # @return [ClaimDetailsResponse] response from the API call
    def fetch_claim(id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/claims/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ClaimDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Error',
                                ApiErrorException))
        .execute
    end

    # Create Claim Reversal
    # @param [UUID | String] id Required parameter: Claim Id
    # @param [ClaimReversalCreation] claim_reversal_creation_request Optional
    # parameter: Example:
    # @return [ClaimReversalDetailsResponse] response from the API call
    def create_claim_reversal(id,
                              claim_reversal_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/transaction/claims/{id}/reversals',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(claim_reversal_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ClaimReversalDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Claim Reversal creation error',
                                ApiErrorException))
        .execute
    end

    # Fetch Claim Reversal
    # @param [UUID | String] id Required parameter: Claim Id
    # @param [UUID | String] reversal_id Required parameter: Claim Reversal Id
    # @return [ClaimReversalDetailsResponse] response from the API call
    def fetch_claim_reversal(id,
                             reversal_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/claims/{id}/reversals/{reversalId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(reversal_id, key: 'reversalId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ClaimReversalDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Error',
                                ApiErrorException))
        .execute
    end

    # Create Claim Reversal Submission
    # @param [UUID | String] id Required parameter: Claim Id
    # @param [UUID | String] reversal_id Required parameter: Claim Reversal Id
    # @param [ClaimReversalSubmissionCreation]
    # claim_reversal_submission_creation_request Optional parameter: Example:
    # @return [ClaimReversalSubmissionDetailsResponse] response from the API call
    def create_claim_reversal_submission(id,
                                         reversal_id,
                                         claim_reversal_submission_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/transaction/claims/{id}/reversals/{reversalId}/submissions',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(reversal_id, key: 'reversalId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(claim_reversal_submission_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ClaimReversalSubmissionDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Claim Reversal creation error',
                                ApiErrorException))
        .execute
    end

    # Fetch Claim Reversal Submission
    # @param [UUID | String] id Required parameter: Claim Id
    # @param [UUID | String] reversal_id Required parameter: Claim Reversal Id
    # @param [UUID | String] submission_id Required parameter: Claim Reversal
    # Submission Id
    # @return [ClaimReversalSubmissionDetailsResponse] response from the API call
    def fetch_claim_reversal_submission(id,
                                        reversal_id,
                                        submission_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/claims/{id}/reversals/{reversalId}/submissions/{submissionId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(reversal_id, key: 'reversalId')
                                    .should_encode(true))
                   .template_param(new_parameter(submission_id, key: 'submissionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ClaimReversalSubmissionDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Error',
                                ApiErrorException))
        .execute
    end

    # Create Claim Submission
    # @param [UUID | String] id Required parameter: Claim Id
    # @param [ClaimSubmissionCreation] claim_submission_creation_request
    # Optional parameter: Example:
    # @return [ClaimSubmissionDetailsResponse] response from the API call
    def create_claim_submission(id,
                                claim_submission_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/transaction/claims/{id}/submissions',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(claim_submission_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ClaimSubmissionDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Claim Submission creation error',
                                ApiErrorException))
        .execute
    end

    # Fetch Claim Submission
    # @param [UUID | String] id Required parameter: Claim Id
    # @param [UUID | String] submission_id Required parameter: Claim Submission
    # Id
    # @return [ClaimSubmissionDetailsResponse] response from the API call
    def fetch_claim_submission(id,
                               submission_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/claims/{id}/submissions/{submissionId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(submission_id, key: 'submissionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ClaimSubmissionDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Error',
                                ApiErrorException))
        .execute
    end
  end
end
