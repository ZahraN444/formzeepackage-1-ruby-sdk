# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # UsersController
  class UsersController < BaseController
    # List all users
    # @param [Integer] page_number Optional parameter: Which page to select
    # @param [Integer] page_size Optional parameter: Number of items to select
    # @return [UserDetailsListResponse] response from the API call
    def list_all_users(page_number: nil,
                       page_size: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/security/users',
                                     Server::DEFAULT)
                   .query_param(new_parameter(page_number, key: 'page[number]'))
                   .query_param(new_parameter(page_size, key: 'page[size]'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(UserDetailsListResponse.method(:from_hash)))
        .execute
    end

    # Create user
    # @param [UserCreation] user_creation_request Optional parameter: Example:
    # @return [UserCreationResponse] response from the API call
    def create_user(user_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/security/users',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(user_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(UserCreationResponse.method(:from_hash))
                   .local_error('400',
                                'Bad request',
                                ApiErrorException)
                   .local_error('409',
                                'Conflict',
                                ApiErrorException))
        .execute
    end

    # Delete user
    # @param [UUID | String] user_id Required parameter: User Id
    # @param [Integer] version Required parameter: Version
    # @return [void] response from the API call
    def delete_user(user_id,
                    version)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/security/users/{user_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(user_id, key: 'user_id')
                                    .should_encode(true))
                   .query_param(new_parameter(version, key: 'version'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .is_response_void(true)
                   .local_error('404',
                                'Not Found',
                                ApiErrorException)
                   .local_error('409',
                                'Conflict',
                                ApiErrorException))
        .execute
    end

    # Fetch user
    # @param [UUID | String] user_id Required parameter: User Id
    # @return [UserDetailsResponse] response from the API call
    def fetch_user(user_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/security/users/{user_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(user_id, key: 'user_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(UserDetailsResponse.method(:from_hash))
                   .local_error('404',
                                'Not Found',
                                ApiErrorException))
        .execute
    end

    # Update user details
    # @param [UUID | String] user_id Required parameter: User Id
    # @param [UserCreation] user_update_request Optional parameter: Example:
    # @return [UserDetailsResponse] response from the API call
    def update_user_details(user_id,
                            user_update_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PATCH,
                                     '/security/users/{user_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(user_id, key: 'user_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(user_update_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(UserDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Bad request',
                                ApiErrorException)
                   .local_error('404',
                                'Not Found',
                                ApiErrorException))
        .execute
    end

    # Fetch access control list for user
    # @param [UUID | String] user_id Required parameter: User Id
    # @param [String] filter_record_type Optional parameter: Record type
    # @param [String] filter_action Optional parameter: Access action
    # @return [AceDetailsListResponse] response from the API call
    def fetch_access_control_list_for_user(user_id,
                                           filter_record_type: nil,
                                           filter_action: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/security/users/{user_id}/aces',
                                     Server::DEFAULT)
                   .template_param(new_parameter(user_id, key: 'user_id')
                                    .should_encode(true))
                   .query_param(new_parameter(filter_record_type, key: 'filter[record_type]'))
                   .query_param(new_parameter(filter_action, key: 'filter[action]'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AceDetailsListResponse.method(:from_hash))
                   .local_error('404',
                                'Not Found',
                                ApiErrorException))
        .execute
    end

    # Fetch credentials for user
    # @param [UUID | String] user_id Required parameter: User Id
    # @return [UserCredentialListResponse] response from the API call
    def fetch_credentials_for_user(user_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/security/users/{user_id}/credentials',
                                     Server::DEFAULT)
                   .template_param(new_parameter(user_id, key: 'user_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(UserCredentialListResponse.method(:from_hash))
                   .local_error('404',
                                'Not Found',
                                ApiErrorException))
        .execute
    end

    # Create new credentials for user
    # @param [UUID | String] user_id Required parameter: User Id
    # @return [CredentialCreationResponse] response from the API call
    def create_new_credentials_for_user(user_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/security/users/{user_id}/credentials',
                                     Server::DEFAULT)
                   .template_param(new_parameter(user_id, key: 'user_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(CredentialCreationResponse.method(:from_hash))
                   .local_error('404',
                                'Not Found',
                                ApiErrorException))
        .execute
    end

    # Delete credentials for user
    # @param [UUID | String] user_id Required parameter: User Id
    # @param [String] client_id Required parameter: client id
    # @return [void] response from the API call
    def delete_credentials_for_user(user_id,
                                    client_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/security/users/{user_id}/credentials/{client_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(user_id, key: 'user_id')
                                    .should_encode(true))
                   .template_param(new_parameter(client_id, key: 'client_id')
                                    .should_encode(true))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .is_response_void(true)
                   .local_error('404',
                                'Not Found',
                                ApiErrorException))
        .execute
    end

    # Fetch all roles for user
    # @param [UUID | String] user_id Required parameter: User Id
    # @return [UserRoleListResponse] response from the API call
    def fetch_all_roles_for_user(user_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/security/users/{user_id}/roles',
                                     Server::DEFAULT)
                   .template_param(new_parameter(user_id, key: 'user_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(UserRoleListResponse.method(:from_hash))
                   .local_error('404',
                                'Not Found',
                                ApiErrorException))
        .execute
    end

    # Remove role from user
    # @param [UUID | String] user_id Required parameter: User Id
    # @param [UUID | String] role_id Required parameter: Role Id
    # @return [void] response from the API call
    def remove_role_from_user(user_id,
                              role_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/security/users/{user_id}/roles/{role_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(user_id, key: 'user_id')
                                    .should_encode(true))
                   .template_param(new_parameter(role_id, key: 'role_id')
                                    .should_encode(true))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .is_response_void(true)
                   .local_error('404',
                                'Not Found',
                                ApiErrorException))
        .execute
    end

    # Add role to user
    # @param [UUID | String] user_id Required parameter: User Id
    # @param [UUID | String] role_id Required parameter: Role Id
    # @return [void] response from the API call
    def add_role_to_user(user_id,
                         role_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/security/users/{user_id}/roles/{role_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(user_id, key: 'user_id')
                                    .should_encode(true))
                   .template_param(new_parameter(role_id, key: 'role_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .is_response_void(true)
                   .local_error('404',
                                'Not Found',
                                ApiErrorException))
        .execute
    end
  end
end
