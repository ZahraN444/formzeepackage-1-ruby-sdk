# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # ACEController
  class ACEController < BaseController
    # List all Access Controls for role
    # @param [UUID | String] role_id Required parameter: Role Id
    # @return [AceDetailsListResponse] response from the API call
    def list_all_access_controls_for_role(role_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/security/roles/{role_id}/aces',
                                     Server::DEFAULT)
                   .template_param(new_parameter(role_id, key: 'role_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AceDetailsListResponse.method(:from_hash))
                   .local_error('404',
                                'Not Found',
                                ApiErrorException))
        .execute
    end

    # Create Access Control Entry
    # @param [UUID | String] role_id Required parameter: Role Id
    # @param [AceCreation] ace_creation_request Optional parameter: Example:
    # @return [AceCreationResponse] response from the API call
    def create_access_control_entry(role_id,
                                    ace_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/security/roles/{role_id}/aces',
                                     Server::DEFAULT)
                   .template_param(new_parameter(role_id, key: 'role_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(ace_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AceCreationResponse.method(:from_hash))
                   .local_error('400',
                                'Bad request',
                                ApiErrorException)
                   .local_error('404',
                                'Not Found',
                                ApiErrorException)
                   .local_error('409',
                                'Conflict',
                                ApiErrorException))
        .execute
    end

    # Delete Access Control Entry
    # @param [UUID | String] role_id Required parameter: Role Id
    # @param [UUID | String] ace_id Required parameter: Ace Id
    # @return [void] response from the API call
    def delete_access_control_entry(role_id,
                                    ace_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/security/roles/{role_id}/aces/{ace_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(role_id, key: 'role_id')
                                    .should_encode(true))
                   .template_param(new_parameter(ace_id, key: 'ace_id')
                                    .should_encode(true))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .is_response_void(true)
                   .local_error('400',
                                'Bad request',
                                ApiErrorException)
                   .local_error('404',
                                'Not Found',
                                ApiErrorException))
        .execute
    end

    # Fetch Access Control Entry
    # @param [UUID | String] role_id Required parameter: Role Id
    # @param [UUID | String] ace_id Required parameter: Ace Id
    # @return [AceDetailsResponse] response from the API call
    def fetch_access_control_entry(role_id,
                                   ace_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/security/roles/{role_id}/aces/{ace_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(role_id, key: 'role_id')
                                    .should_encode(true))
                   .template_param(new_parameter(ace_id, key: 'ace_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AceDetailsResponse.method(:from_hash))
                   .local_error('404',
                                'Not Found',
                                ApiErrorException))
        .execute
    end
  end
end
