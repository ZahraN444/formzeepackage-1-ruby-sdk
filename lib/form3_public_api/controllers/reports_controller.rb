# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # ReportsController
  class ReportsController < BaseController
    # List reports
    # @param [String] page_number Optional parameter: Which page to select
    # @param [Integer] page_size Optional parameter: Number of items to select
    # @param [Array[UUID | String]] filter_organisation_id Optional parameter:
    # Filter by organisation Ids
    # @param [String] filter_report_type Optional parameter: Filter by
    # ReportType
    # @param [String] filter_report_type_description Optional parameter: Filter
    # by Report Type Description
    # @param [String] filter_report_source Optional parameter: Filter by Report
    # Source
    # @param [DateTime] filter_created_on_after Optional parameter: Request
    # reports created after specific date time
    # @param [DateTime] filter_created_on_before Optional parameter: Request
    # reports created after specific date time
    # @param [DateTime] filter_modified_on_after Optional parameter: Request
    # reports modified after specific date time
    # @param [DateTime] filter_modified_on_before Optional parameter: Request
    # reports modified before specific date time
    # @param [Date] filter_processing_date_from Optional parameter: Request
    # reports with processing date from specific date (inclusive)
    # @param [Date] filter_processing_date_to Optional parameter: Request
    # reports with processing date to specific date (inclusive)
    # @return [ReportDetailsListResponse] response from the API call
    def list_reports(page_number: nil,
                     page_size: 100,
                     filter_organisation_id: nil,
                     filter_report_type: nil,
                     filter_report_type_description: nil,
                     filter_report_source: nil,
                     filter_created_on_after: nil,
                     filter_created_on_before: nil,
                     filter_modified_on_after: nil,
                     filter_modified_on_before: nil,
                     filter_processing_date_from: nil,
                     filter_processing_date_to: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/notification/reports',
                                     Server::DEFAULT)
                   .query_param(new_parameter(page_number, key: 'page[number]'))
                   .query_param(new_parameter(page_size, key: 'page[size]'))
                   .query_param(new_parameter(filter_organisation_id, key: 'filter[organisation_id]'))
                   .query_param(new_parameter(filter_report_type, key: 'filter[report_type]'))
                   .query_param(new_parameter(filter_report_type_description, key: 'filter[report_type_description]'))
                   .query_param(new_parameter(filter_report_source, key: 'filter[report_source]'))
                   .query_param(new_parameter(filter_created_on_after, key: 'filter[created_on_after]'))
                   .query_param(new_parameter(filter_created_on_before, key: 'filter[created_on_before]'))
                   .query_param(new_parameter(filter_modified_on_after, key: 'filter[modified_on_after]'))
                   .query_param(new_parameter(filter_modified_on_before, key: 'filter[modified_on_before]'))
                   .query_param(new_parameter(filter_processing_date_from, key: 'filter[processing_date_from]'))
                   .query_param(new_parameter(filter_processing_date_to, key: 'filter[processing_date_to]'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ReportDetailsListResponse.method(:from_hash))
                   .local_error('400',
                                'Reports bad request',
                                ApiErrorException)
                   .local_error('403',
                                'Forbidden',
                                ApiErrorException))
        .execute
    end

    # Get report by ID
    # @param [UUID | String] id Required parameter: Report ID
    # @param [String] accept Required parameter: Acceptable Format
    # @return [ReportDetailsResponse] response from the API call
    def get_report(id,
                   accept)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/notification/reports/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter(accept, key: 'Accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ReportDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Bad Request',
                                ApiErrorException)
                   .local_error('403',
                                'Forbidden',
                                ApiErrorException)
                   .local_error('404',
                                'Report Not Found',
                                ApiErrorException)
                   .local_error('406',
                                'Report not available in acceptable format',
                                ApiErrorException))
        .execute
    end

    # Get Report Admission by ID
    # @param [UUID | String] id Required parameter: Report Id
    # @param [UUID | String] admission_id Required parameter: Report Admission
    # ID
    # @return [ReportAdmissionDetailsResponse] response from the API call
    def get_report_admission_by_id(id,
                                   admission_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/notification/reports/{id}/admissions/{admissionId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(admission_id, key: 'admissionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ReportAdmissionDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Bad Request',
                                ApiErrorException)
                   .local_error('403',
                                'Forbidden',
                                ApiErrorException)
                   .local_error('404',
                                'Not Found',
                                ApiErrorException))
        .execute
    end
  end
end
