# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # AccountValidationController
  class AccountValidationController < BaseController
    # Fetch sort code details
    # @param [String] sortcode Required parameter: Sort code
    # @return [SortCodeDetailsResponse] response from the API call
    def fetch_sort_code_details(sortcode)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/validations/gbdsc/sortcodes/{sortcode}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(sortcode, key: 'sortcode')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(SortCodeDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Validation failed',
                                ApiErrorException))
        .execute
    end

    # Validate sortcode and account number details
    # @param [String] sortcode Required parameter: Sort code
    # @param [String] accountnumber Required parameter: Account number
    # @return [AccountNumberDetailsResponse] response from the API call
    def validate_sortcode_and_account_number_details(sortcode,
                                                     accountnumber)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/validations/gbdsc/sortcodes/{sortcode}/accountnumbers/{accountnumber}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(sortcode, key: 'sortcode')
                                    .should_encode(true))
                   .template_param(new_parameter(accountnumber, key: 'accountnumber')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AccountNumberDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Validation error',
                                ApiErrorException)
                   .local_error('404',
                                'Validation failed',
                                ApiErrorException))
        .execute
    end
  end
end
