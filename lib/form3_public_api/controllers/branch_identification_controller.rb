# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # BranchIdentificationController
  class BranchIdentificationController < BaseController
    # List Branch Identifications by Branch
    # @param [UUID | String] branch_id Required parameter: Branch Id to which
    # this identification relates to
    # @param [String] page_number Optional parameter: Which page to select
    # @param [Integer] page_size Optional parameter: Number of items to select
    # @param [Array[UUID | String]] filter_organisation_id Optional parameter:
    # Filter by organisation id
    # @param [Array[String]] filter_secondary_identification Optional parameter:
    # Filter to only include branch identifications with specified
    # secondary_identification
    # @return [BranchIdentificationListResponse] response from the API call
    def list_branch_identifications_by_branch(branch_id,
                                              page_number: nil,
                                              page_size: nil,
                                              filter_organisation_id: nil,
                                              filter_secondary_identification: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/organisation/branches/{branch_id}/identifications',
                                     Server::DEFAULT)
                   .template_param(new_parameter(branch_id, key: 'branch_id')
                                    .should_encode(true))
                   .query_param(new_parameter(page_number, key: 'page[number]'))
                   .query_param(new_parameter(page_size, key: 'page[size]'))
                   .query_param(new_parameter(filter_organisation_id, key: 'filter[organisation_id]'))
                   .query_param(new_parameter(filter_secondary_identification, key: 'filter[secondary_identification]'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(BranchIdentificationListResponse.method(:from_hash)))
        .execute
    end

    # Create an identification for an existing Branch
    # @param [UUID | String] branch_id Required parameter: Branch Id to which
    # this identification relates to
    # @param [BranchIdentificationRequest]
    # branch_identification_creation_request Optional parameter: Example:
    # @return [BranchIdentificationResponse] response from the API call
    def create_an_identification_for_an_existing_branch(branch_id,
                                                        branch_identification_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/organisation/branches/{branch_id}/identifications',
                                     Server::DEFAULT)
                   .template_param(new_parameter(branch_id, key: 'branch_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(branch_identification_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(BranchIdentificationResponse.method(:from_hash))
                   .local_error('409',
                                'Branch Identification creation error, constraint violation of'\
                                 ' secondary identification',
                                ApiErrorException))
        .execute
    end

    # Delete branch identification
    # @param [UUID | String] branch_id Required parameter: Branch Id
    # @param [UUID | String] identification_id Required parameter: Branch
    # Identification Id
    # @param [Integer] version Required parameter: Version
    # @return [void] response from the API call
    def delete_branch_identification(branch_id,
                                     identification_id,
                                     version)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/organisation/branches/{branch_id}/identifications/{identification_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(branch_id, key: 'branch_id')
                                    .should_encode(true))
                   .template_param(new_parameter(identification_id, key: 'identification_id')
                                    .should_encode(true))
                   .query_param(new_parameter(version, key: 'version'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .is_response_void(true)
                   .local_error('404',
                                'Branch Identification not found',
                                APIException))
        .execute
    end

    # Get a branch identification by id
    # @param [UUID | String] branch_id Required parameter: Branch Id
    # @param [UUID | String] identification_id Required parameter: Branch
    # Identification Id
    # @return [BranchIdentificationResponse] response from the API call
    def get_a_branch_identification_by_id(branch_id,
                                          identification_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/organisation/branches/{branch_id}/identifications/{identification_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(branch_id, key: 'branch_id')
                                    .should_encode(true))
                   .template_param(new_parameter(identification_id, key: 'identification_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(BranchIdentificationResponse.method(:from_hash)))
        .execute
    end

    # Amend Branch Identification
    # @param [UUID | String] branch_id Required parameter: Branch Id
    # @param [UUID | String] identification_id Required parameter: Branch
    # Identification Id; Must match id in the payload
    # @param [BranchIdentificationRequest] branch_identification_amend_request
    # Optional parameter: Example:
    # @return [BranchIdentificationResponse] response from the API call
    def amend_branch_identification(branch_id,
                                    identification_id,
                                    branch_identification_amend_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PATCH,
                                     '/organisation/branches/{branch_id}/identifications/{identification_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(branch_id, key: 'branch_id')
                                    .should_encode(true))
                   .template_param(new_parameter(identification_id, key: 'identification_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(branch_identification_amend_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(BranchIdentificationResponse.method(:from_hash))
                   .local_error('409',
                                'Branch Identification update error, constraint violation of'\
                                 ' secondary identification',
                                ApiErrorException))
        .execute
    end
  end
end
