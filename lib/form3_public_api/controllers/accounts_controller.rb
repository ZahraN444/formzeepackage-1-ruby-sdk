# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # AccountsController
  class AccountsController < BaseController
    # List accounts
    # @param [String] page_number Optional parameter: Which page to select
    # @param [String] page_before Optional parameter: Cursor value for getting
    # previous page
    # @param [String] page_after Optional parameter: Cursor value for getting
    # next page
    # @param [Integer] page_size Optional parameter: Number of items to select
    # @param [Array[UUID | String]] filter_organisation_id Optional parameter:
    # Filter by organisation id
    # @param [Array[String]] filter_bank_id_code Optional parameter: Filter by
    # type of bank id e.g. "GBDSC"
    # @param [Array[String]] filter_bank_id Optional parameter: Filter by bank
    # id e.g. sort code or bic
    # @param [Array[String]] filter_account_number Optional parameter: Filter by
    # account number
    # @param [Array[String]] filter_country Optional parameter: Filter by
    # country e.g. FR,GB
    # @param [Array[String]] filter_customer_id Optional parameter: Filter by
    # customer_id
    # @param [Array[String]] filter_iban Optional parameter: Filter by IBAN
    # @return [AccountDetailsListResponse] response from the API call
    def list_accounts(page_number: nil,
                      page_before: nil,
                      page_after: nil,
                      page_size: nil,
                      filter_organisation_id: nil,
                      filter_bank_id_code: nil,
                      filter_bank_id: nil,
                      filter_account_number: nil,
                      filter_country: nil,
                      filter_customer_id: nil,
                      filter_iban: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/organisation/accounts',
                                     Server::DEFAULT)
                   .query_param(new_parameter(page_number, key: 'page[number]'))
                   .query_param(new_parameter(page_before, key: 'page[before]'))
                   .query_param(new_parameter(page_after, key: 'page[after]'))
                   .query_param(new_parameter(page_size, key: 'page[size]'))
                   .query_param(new_parameter(filter_organisation_id, key: 'filter[organisation_id]'))
                   .query_param(new_parameter(filter_bank_id_code, key: 'filter[bank_id_code]'))
                   .query_param(new_parameter(filter_bank_id, key: 'filter[bank_id]'))
                   .query_param(new_parameter(filter_account_number, key: 'filter[account_number]'))
                   .query_param(new_parameter(filter_country, key: 'filter[country]'))
                   .query_param(new_parameter(filter_customer_id, key: 'filter[customer_id]'))
                   .query_param(new_parameter(filter_iban, key: 'filter[iban]'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AccountDetailsListResponse.method(:from_hash)))
        .execute
    end

    # Create account
    # @param [AccountCreation] account_creation_request Optional parameter:
    # Example:
    # @return [AccountCreationResponse] response from the API call
    def create_account(account_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/organisation/accounts',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(account_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AccountCreationResponse.method(:from_hash)))
        .execute
    end

    # Delete account
    # @param [UUID | String] id Required parameter: Account Id
    # @param [Integer] version Required parameter: Version
    # @return [void] response from the API call
    def delete_account(id,
                       version)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/organisation/accounts/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .query_param(new_parameter(version, key: 'version'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .is_response_void(true))
        .execute
    end

    # Fetch account
    # @param [UUID | String] id Required parameter: Account Id
    # @return [AccountDetailsResponse] response from the API call
    def fetch_account(id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/organisation/accounts/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AccountDetailsResponse.method(:from_hash)))
        .execute
    end

    # Amend account
    # @param [UUID | String] id Required parameter: Account Id
    # @param [AccountAmendment] account_amend_request Optional parameter:
    # Example:
    # @return [AccountDetailsResponse] response from the API call
    def amend_account(id,
                      account_amend_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PATCH,
                                     '/organisation/accounts/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(account_amend_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AccountDetailsResponse.method(:from_hash)))
        .execute
    end

    # Fetch account events
    # @param [UUID | String] id Required parameter: Account Id
    # @param [String] page_number Optional parameter: Which page to select
    # @param [Integer] page_size Optional parameter: Number of items to select
    # @return [AccountEventListResponse] response from the API call
    def fetch_account_events(id,
                             page_number: nil,
                             page_size: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/organisation/accounts/{id}/events',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .query_param(new_parameter(page_number, key: 'page[number]'))
                   .query_param(new_parameter(page_size, key: 'page[size]'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(AccountEventListResponse.method(:from_hash)))
        .execute
    end
  end
end
