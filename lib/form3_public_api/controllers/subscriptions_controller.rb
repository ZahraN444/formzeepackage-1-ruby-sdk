# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # SubscriptionsController
  class SubscriptionsController < BaseController
    # List all subscriptions
    # @param [String] page_number Optional parameter: Which page to select
    # @param [Integer] page_size Optional parameter: Number of items to select
    # @param [Array[String]] filter_event_type Optional parameter: Filter by
    # event type
    # @param [Array[String]] filter_record_type Optional parameter: Filter by
    # record type
    # @param [Array[UUID | String]] filter_organisation_id Optional parameter:
    # Filter by organisation id
    # @param [TrueClass | FalseClass] filter_deactivated Optional parameter:
    # Filter by deactivated
    # @param [String] filter_callback_transport Optional parameter: Filter by
    # callback_transport
    # @param [String] filter_callback_uri_search_term Optional parameter: Filter
    # on callback_uri containing a search term
    # @param [TrueClass | FalseClass] filter_notification_filter Optional
    # parameter: Filter by existence of notification filters
    # @return [SubscriptionDetailsListResponse] response from the API call
    def list_subscriptions(page_number: nil,
                           page_size: nil,
                           filter_event_type: nil,
                           filter_record_type: nil,
                           filter_organisation_id: nil,
                           filter_deactivated: nil,
                           filter_callback_transport: nil,
                           filter_callback_uri_search_term: nil,
                           filter_notification_filter: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/notification/subscriptions',
                                     Server::DEFAULT)
                   .query_param(new_parameter(page_number, key: 'page[number]'))
                   .query_param(new_parameter(page_size, key: 'page[size]'))
                   .query_param(new_parameter(filter_event_type, key: 'filter[event_type]'))
                   .query_param(new_parameter(filter_record_type, key: 'filter[record_type]'))
                   .query_param(new_parameter(filter_organisation_id, key: 'filter[organisation_id]'))
                   .query_param(new_parameter(filter_deactivated, key: 'filter[deactivated]'))
                   .query_param(new_parameter(filter_callback_transport, key: 'filter[callback_transport]'))
                   .query_param(new_parameter(filter_callback_uri_search_term, key: 'filter[callback_uri_search_term]'))
                   .query_param(new_parameter(filter_notification_filter, key: 'filter[notification_filter]'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(SubscriptionDetailsListResponse.method(:from_hash)))
        .execute
    end

    # Create subscription
    # @param [SubscriptionCreation] subscription_creation_request Required
    # parameter: Example:
    # @return [SubscriptionCreationResponse] response from the API call
    def create_subscription(subscription_creation_request)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/notification/subscriptions',
                                     Server::DEFAULT)
                   .body_param(new_parameter(subscription_creation_request))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(SubscriptionCreationResponse.method(:from_hash)))
        .execute
    end

    # Deletes a subscription
    # @param [UUID | String] id Required parameter: Subscription Id
    # @param [Integer] version Required parameter: Version
    # @return [void] response from the API call
    def delete_subscription(id,
                            version)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/notification/subscriptions/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .query_param(new_parameter(version, key: 'version'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .is_response_void(true))
        .execute
    end

    # Fetch subscription
    # @param [UUID | String] id Required parameter: Subscription Id
    # @return [SubscriptionDetailsResponse] response from the API call
    def fetch_subscription(id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/notification/subscriptions/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(SubscriptionDetailsResponse.method(:from_hash)))
        .execute
    end

    # Update subscription details
    # @param [UUID | String] id Required parameter: Subscription Id
    # @param [SubscriptionAmendment] subscription_update_request Optional
    # parameter: Example:
    # @return [SubscriptionDetailsResponse] response from the API call
    def patch_subscription(id,
                           subscription_update_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PATCH,
                                     '/notification/subscriptions/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(subscription_update_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(SubscriptionDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Bad Request',
                                ApiErrorException)
                   .local_error('404',
                                'Not Found',
                                ApiErrorException)
                   .local_error('409',
                                'Conflict',
                                ApiErrorException)
                   .local_error('500',
                                'Internal Error',
                                ApiErrorException))
        .execute
    end
  end
end
