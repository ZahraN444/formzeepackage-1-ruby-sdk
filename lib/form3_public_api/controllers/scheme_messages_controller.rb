# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # SchemeMessagesController
  class SchemeMessagesController < BaseController
    # List messages
    # @param [String] page_number Optional parameter: Which page to select
    # @param [Integer] page_size Optional parameter: Number of items to select
    # @param [String] filter_unique_scheme_id Optional parameter: Filter by
    # Unique SchemeId
    # @param [String] filter_scheme_message_type Optional parameter: Filter by
    # Scheme Message Type
    # @param [String] filter_payment_scheme Optional parameter: Filter by
    # Payment Scheme
    # @param [DateTime] filter_admission_admission_date_from Optional parameter:
    # Filter by Admission DateTime
    # @param [DateTime] filter_admission_admission_date_to Optional parameter:
    # Filter by Admission DateTime
    # @return [SchemeMessageDetailsListResponse] response from the API call
    def list_messages(page_number: nil,
                      page_size: 100,
                      filter_unique_scheme_id: nil,
                      filter_scheme_message_type: nil,
                      filter_payment_scheme: nil,
                      filter_admission_admission_date_from: nil,
                      filter_admission_admission_date_to: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/notification/schememessages',
                                     Server::DEFAULT)
                   .query_param(new_parameter(page_number, key: 'page[number]'))
                   .query_param(new_parameter(page_size, key: 'page[size]'))
                   .query_param(new_parameter(filter_unique_scheme_id, key: 'filter[unique_scheme_id]'))
                   .query_param(new_parameter(filter_scheme_message_type, key: 'filter[scheme_message_type]'))
                   .query_param(new_parameter(filter_payment_scheme, key: 'filter[payment_scheme]'))
                   .query_param(new_parameter(filter_admission_admission_date_from, key: 'filter[admission.admission_date_from]'))
                   .query_param(new_parameter(filter_admission_admission_date_to, key: 'filter[admission.admission_date_to]'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(SchemeMessageDetailsListResponse.method(:from_hash))
                   .local_error('400',
                                'Bad Request',
                                ApiErrorException)
                   .local_error('401',
                                'Unauthorized',
                                ApiErrorException)
                   .local_error('403',
                                'Forbidden',
                                ApiErrorException))
        .execute
    end

    # Fetch message
    # @param [UUID | String] id Required parameter: Scheme Message Id
    # @return [SchemeMessageDetailsResponse] response from the API call
    def fetch_message(id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/notification/schememessages/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(SchemeMessageDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Bad Request',
                                ApiErrorException)
                   .local_error('401',
                                'Unauthorized',
                                ApiErrorException)
                   .local_error('403',
                                'Forbidden',
                                ApiErrorException)
                   .local_error('404',
                                'Scheme Message Not found',
                                ApiErrorException))
        .execute
    end

    # Get Scheme Message Admission By AdmissionId
    # @param [UUID | String] id Required parameter: Scheme Message Id
    # @param [UUID | String] admission_id Required parameter: Scheme Message
    # Admission Id
    # @return [SchemeMessageAdmissionDetailsResponse] response from the API call
    def get_scheme_message_admission_by_admission_id(id,
                                                     admission_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/notification/schememessages/{id}/admissions/{admissionId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(admission_id, key: 'admissionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(SchemeMessageAdmissionDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Scheme Message Admission by Id bad request',
                                ApiErrorException)
                   .local_error('401',
                                'Unauthorized',
                                ApiErrorException)
                   .local_error('403',
                                'Forbidden',
                                ApiErrorException)
                   .local_error('404',
                                'Scheme Message Not found',
                                ApiErrorException))
        .execute
    end
  end
end
