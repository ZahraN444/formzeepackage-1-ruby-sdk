# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # BranchesController
  class BranchesController < BaseController
    # List branches
    # @param [String] page_number Optional parameter: Which page to select
    # @param [Integer] page_size Optional parameter: Number of items to select
    # @param [Array[UUID | String]] filter_organisation_id Optional parameter:
    # Filter by organisation id
    # @param [Array[String]] filter_bank_id Optional parameter: Filter by bank
    # id e.g. sort code or bic
    # @param [Array[String]] filter_bank_id_code Optional parameter: Filter by
    # type of bank id e.g. "GBDSC"
    # @param [Array[String]] filter_acceptance_qualifier Optional parameter:
    # Filter by acceptance qualifier
    # @param [Array[String]] filter_validation_type Optional parameter: Filter
    # by validation type e.g. card
    # @param [Array[String]] filter_reference_mask Optional parameter: Filter by
    # reference mask
    # @return [BranchDetailsListResponse] response from the API call
    def list_branches(page_number: nil,
                      page_size: nil,
                      filter_organisation_id: nil,
                      filter_bank_id: nil,
                      filter_bank_id_code: nil,
                      filter_acceptance_qualifier: nil,
                      filter_validation_type: nil,
                      filter_reference_mask: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/organisation/branches',
                                     Server::DEFAULT)
                   .query_param(new_parameter(page_number, key: 'page[number]'))
                   .query_param(new_parameter(page_size, key: 'page[size]'))
                   .query_param(new_parameter(filter_organisation_id, key: 'filter[organisation_id]'))
                   .query_param(new_parameter(filter_bank_id, key: 'filter[bank_id]'))
                   .query_param(new_parameter(filter_bank_id_code, key: 'filter[bank_id_code]'))
                   .query_param(new_parameter(filter_acceptance_qualifier, key: 'filter[acceptance_qualifier]'))
                   .query_param(new_parameter(filter_validation_type, key: 'filter[validation_type]'))
                   .query_param(new_parameter(filter_reference_mask, key: 'filter[reference_mask]'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(BranchDetailsListResponse.method(:from_hash)))
        .execute
    end

    # Create a Branch
    # @param [BranchCreation] branch_creation_request Optional parameter:
    # Example:
    # @return [BranchCreationResponse] response from the API call
    def create_a_branch(branch_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/organisation/branches',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(branch_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(BranchCreationResponse.method(:from_hash))
                   .local_error('409',
                                'Branch creation error, constraint violation of organisation id'\
                                 ' and bank id',
                                ApiErrorException))
        .execute
    end

    # Delete branch
    # @param [UUID | String] id Required parameter: Branch Id
    # @param [Integer] version Required parameter: Version
    # @return [void] response from the API call
    def delete_branch(id,
                      version)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/organisation/branches/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .query_param(new_parameter(version, key: 'version'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .is_response_void(true))
        .execute
    end

    # Fetch branch
    # @param [UUID | String] id Required parameter: Branch Id
    # @return [BranchDetailsResponse] response from the API call
    def fetch_branch(id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/organisation/branches/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(BranchDetailsResponse.method(:from_hash)))
        .execute
    end

    # Amend branch
    # @param [UUID | String] id Required parameter: Branches Id
    # @param [BranchAmendment] branch_amend_request Optional parameter:
    # Example:
    # @return [BranchDetailsResponse] response from the API call
    def amend_branch(id,
                     branch_amend_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PATCH,
                                     '/organisation/branches/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(branch_amend_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(BranchDetailsResponse.method(:from_hash)))
        .execute
    end
  end
end
