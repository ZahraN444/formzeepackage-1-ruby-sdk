# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # OrganisationsController
  class OrganisationsController < BaseController
    # List all organisations
    # @param [UUID | String] filter_child_organisation_id Optional parameter:
    # Child org id
    # @param [Array[UUID | String]] filter_organisation_ids Optional parameter:
    # Organisation ids
    # @return [OrganisationDetailsListResponse] response from the API call
    def list_all_organisations(filter_child_organisation_id: nil,
                               filter_organisation_ids: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/organisation/units',
                                     Server::DEFAULT)
                   .query_param(new_parameter(filter_child_organisation_id, key: 'filter[child_organisation_id]'))
                   .query_param(new_parameter(filter_organisation_ids, key: 'filter[organisation_ids]'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(OrganisationDetailsListResponse.method(:from_hash)))
        .execute
    end

    # Create organisation
    # @param [OrganisationCreation] organisation_creation_request Optional
    # parameter: Example:
    # @return [OrganisationCreationResponse] response from the API call
    def create_organisation(organisation_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/organisation/units',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(organisation_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(OrganisationCreationResponse.method(:from_hash))
                   .local_error('400',
                                'Bad Request',
                                ApiErrorException)
                   .local_error('409',
                                'Conflict',
                                ApiErrorException))
        .execute
    end

    # Fetch organisation
    # @param [UUID | String] id Required parameter: Organisation Id
    # @return [OrganisationDetailsResponse] response from the API call
    def fetch_organisation(id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/organisation/units/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(OrganisationDetailsResponse.method(:from_hash))
                   .local_error('404',
                                'Not Found',
                                ApiErrorException))
        .execute
    end

    # Update organisation
    # @param [UUID | String] id Required parameter: Organisation Id
    # @param [OrganisationUpdate] organisation_update_request Optional
    # parameter: Example:
    # @return [OrganisationDetailsResponse] response from the API call
    def update_organisation(id,
                            organisation_update_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PATCH,
                                     '/organisation/units/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(organisation_update_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(OrganisationDetailsResponse.method(:from_hash))
                   .local_error('400',
                                'Bad request',
                                ApiErrorException)
                   .local_error('404',
                                'Not Found',
                                ApiErrorException))
        .execute
    end
  end
end
