# form3_public_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Form3PublicApi
  # DirectDebitsController
  class DirectDebitsController < BaseController
    # List direct debits
    # @param [String] page_number Optional parameter: Which page to select
    # @param [String] page_before Optional parameter: Cursor for previous page
    # (this is a base64-encoded UUID continuation token returned from the
    # application and should not be manually generated, unless requesting the
    # last page, where the value should be set to "end").
    # @param [String] page_after Optional parameter: Cursor for next page (this
    # is a base64-encoded UUID continuation token returned from the application
    # and should not be manually generated, unless requesting the first page,
    # where the value should be set to "start").
    # @param [Integer] page_size Optional parameter: Number of items to select
    # @param [Array[UUID | String]] filter_organisation_id Optional parameter:
    # Filter by organisation id
    # @param [DateTime] filter_created_date_from Optional parameter: Example:
    # @param [DateTime] filter_created_date_to Optional parameter: Example:
    # @param [DateTime] filter_modified_date_from Optional parameter: Example:
    # @param [DateTime] filter_modified_date_to Optional parameter: Example:
    # @param [String] filter_debtor_party_account_number Optional parameter:
    # Example:
    # @param [String] filter_debtor_party_bank_id Optional parameter: Example:
    # @param [String] filter_beneficiary_party_account_number Optional
    # parameter: Example:
    # @param [String] filter_beneficiary_party_bank_id Optional parameter:
    # Example:
    # @param [String] filter_currency Optional parameter: Example:
    # @param [String] filter_payment_scheme Optional parameter: Example:
    # @param [String] filter_payment_type Optional parameter: Example:
    # @param [Date] filter_processing_date_from Optional parameter: Example:
    # @param [Date] filter_processing_date_to Optional parameter: Example:
    # @param [String] filter_clearing_id Optional parameter: Example:
    # @param [DateTime] filter_admission_admission_date_from Optional parameter:
    # Example:
    # @param [DateTime] filter_admission_admission_date_to Optional parameter:
    # Example:
    # @param [String] filter_admission_status Optional parameter: Filter by
    # admission status
    # @param [String] filter_admission_scheme_status_code Optional parameter:
    # Filter by admission scheme status code
    # @param [String] filter_amount Optional parameter: Filter by amount
    # @param [String] filter_reference Optional parameter: Filter by reference
    # @param [String] filter_unique_scheme_id Optional parameter: Filter by
    # unique scheme id
    # @param [DateTime] filter_submission_submission_date_from Optional
    # parameter: Example:
    # @param [DateTime] filter_submission_submission_date_to Optional parameter:
    # Example:
    # @param [String] filter_submission_status Optional parameter: Filter by
    # submission status
    # @param [String] filter_submission_scheme_status_code Optional parameter:
    # Filter by submission scheme status code
    # @param [Array[FilterRelationshipsEnum]] filter_relationships Optional
    # parameter: Filter for direct debits containing all of the requested
    # relationships
    # @param [Array[FilterNotRelationshipsEnum]] filter_not_relationships
    # Optional parameter: Filter for direct debits containing none of the
    # requested relationships
    # @return [DirectDebitDetailsListResponse] response from the API call
    def get_directdebits(page_number: nil,
                         page_before: nil,
                         page_after: nil,
                         page_size: nil,
                         filter_organisation_id: nil,
                         filter_created_date_from: nil,
                         filter_created_date_to: nil,
                         filter_modified_date_from: nil,
                         filter_modified_date_to: nil,
                         filter_debtor_party_account_number: nil,
                         filter_debtor_party_bank_id: nil,
                         filter_beneficiary_party_account_number: nil,
                         filter_beneficiary_party_bank_id: nil,
                         filter_currency: nil,
                         filter_payment_scheme: nil,
                         filter_payment_type: nil,
                         filter_processing_date_from: nil,
                         filter_processing_date_to: nil,
                         filter_clearing_id: nil,
                         filter_admission_admission_date_from: nil,
                         filter_admission_admission_date_to: nil,
                         filter_admission_status: nil,
                         filter_admission_scheme_status_code: nil,
                         filter_amount: nil,
                         filter_reference: nil,
                         filter_unique_scheme_id: nil,
                         filter_submission_submission_date_from: nil,
                         filter_submission_submission_date_to: nil,
                         filter_submission_status: nil,
                         filter_submission_scheme_status_code: nil,
                         filter_relationships: nil,
                         filter_not_relationships: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits',
                                     Server::DEFAULT)
                   .query_param(new_parameter(page_number, key: 'page[number]'))
                   .query_param(new_parameter(page_before, key: 'page[before]'))
                   .query_param(new_parameter(page_after, key: 'page[after]'))
                   .query_param(new_parameter(page_size, key: 'page[size]'))
                   .query_param(new_parameter(filter_organisation_id, key: 'filter[organisation_id]'))
                   .query_param(new_parameter(filter_created_date_from, key: 'filter[created_date_from]'))
                   .query_param(new_parameter(filter_created_date_to, key: 'filter[created_date_to]'))
                   .query_param(new_parameter(filter_modified_date_from, key: 'filter[modified_date_from]'))
                   .query_param(new_parameter(filter_modified_date_to, key: 'filter[modified_date_to]'))
                   .query_param(new_parameter(filter_debtor_party_account_number, key: 'filter[debtor_party.account_number]'))
                   .query_param(new_parameter(filter_debtor_party_bank_id, key: 'filter[debtor_party.bank_id]'))
                   .query_param(new_parameter(filter_beneficiary_party_account_number, key: 'filter[beneficiary_party.account_number]'))
                   .query_param(new_parameter(filter_beneficiary_party_bank_id, key: 'filter[beneficiary_party.bank_id]'))
                   .query_param(new_parameter(filter_currency, key: 'filter[currency]'))
                   .query_param(new_parameter(filter_payment_scheme, key: 'filter[payment_scheme]'))
                   .query_param(new_parameter(filter_payment_type, key: 'filter[payment_type]'))
                   .query_param(new_parameter(filter_processing_date_from, key: 'filter[processing_date_from]'))
                   .query_param(new_parameter(filter_processing_date_to, key: 'filter[processing_date_to]'))
                   .query_param(new_parameter(filter_clearing_id, key: 'filter[clearing_id]'))
                   .query_param(new_parameter(filter_admission_admission_date_from, key: 'filter[admission.admission_date_from]'))
                   .query_param(new_parameter(filter_admission_admission_date_to, key: 'filter[admission.admission_date_to]'))
                   .query_param(new_parameter(filter_admission_status, key: 'filter[admission.status]'))
                   .query_param(new_parameter(filter_admission_scheme_status_code, key: 'filter[admission.scheme_status_code]'))
                   .query_param(new_parameter(filter_amount, key: 'filter[amount]'))
                   .query_param(new_parameter(filter_reference, key: 'filter[reference]'))
                   .query_param(new_parameter(filter_unique_scheme_id, key: 'filter[unique_scheme_id]'))
                   .query_param(new_parameter(filter_submission_submission_date_from, key: 'filter[submission.submission_date_from]'))
                   .query_param(new_parameter(filter_submission_submission_date_to, key: 'filter[submission.submission_date_to]'))
                   .query_param(new_parameter(filter_submission_status, key: 'filter[submission.status]'))
                   .query_param(new_parameter(filter_submission_scheme_status_code, key: 'filter[submission.scheme_status_code]'))
                   .query_param(new_parameter(filter_relationships, key: 'filter[relationships]'))
                   .query_param(new_parameter(filter_not_relationships, key: 'filter[not_relationships]'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitDetailsListResponse.method(:from_hash)))
        .execute
    end

    # Create Direct debit
    # @param [DirectDebitCreation] direct_debit_creation_request Optional
    # parameter: Example:
    # @return [DirectDebitCreationResponse] response from the API call
    def post_directdebits(direct_debit_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/transaction/directdebits',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(direct_debit_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitCreationResponse.method(:from_hash))
                   .local_error('400',
                                'Direct Debit creation error',
                                ApiErrorException))
        .execute
    end

    # Fetch direct debit
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @return [DirectDebitDetailsResponse] response from the API call
    def get_directdebits_id(id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitDetailsResponse.method(:from_hash)))
        .execute
    end

    # Fetch Direct Debit Admission
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] admission_id Required parameter: Direct Debit
    # Admission Id
    # @return [DirectDebitAdmissionDetailsResponse] response from the API call
    def get_directdebits_id_admissions_admission_id(id,
                                                    admission_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits/{id}/admissions/{admissionId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(admission_id, key: 'admissionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitAdmissionDetailsResponse.method(:from_hash)))
        .execute
    end

    # Create direct debit decision
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [DirectDebitDecisionCreation]
    # direct_debit_decision_creation_request Optional parameter: Example:
    # @return [DirectDebitDecisionCreationResponse] response from the API call
    def post_directdebits_id_decisions(id,
                                       direct_debit_decision_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/transaction/directdebits/{id}/decisions',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(direct_debit_decision_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitDecisionCreationResponse.method(:from_hash))
                   .local_error('400',
                                'Direct Debit decision creation error',
                                ApiErrorException)
                   .local_error('409',
                                'Direct Debit decision creation conflict error',
                                ApiErrorException))
        .execute
    end

    # Get direct debit decision
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] decision_id Required parameter: Direct Debit
    # decision id
    # @return [DirectDebitDecisionDetailsResponse] response from the API call
    def get_directdebits_id_decisions_decision_id(id,
                                                  decision_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits/{id}/decisions/{decisionId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(decision_id, key: 'decisionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitDecisionDetailsResponse.method(:from_hash)))
        .execute
    end

    # Create direct debit decision admissions
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] decision_id Required parameter: Direct Debit
    # decision id
    # @param [DirectDebitDecisionAdmissionCreation]
    # direct_debit_admission_submission_creation_request Optional parameter:
    # Example:
    # @return [DirectDebitDecisionAdmissionCreationResponse] response from the API call
    def post_directdebits_id_decisions_decision_id_admissions(id,
                                                              decision_id,
                                                              direct_debit_admission_submission_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/transaction/directdebits/{id}/decisions/{decisionId}/admissions',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(decision_id, key: 'decisionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(direct_debit_admission_submission_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitDecisionAdmissionCreationResponse.method(:from_hash))
                   .local_error('400',
                                'Direct Debit decision admission creation error',
                                ApiErrorException)
                   .local_error('409',
                                'Direct Debit decision submission creation conflict error',
                                ApiErrorException))
        .execute
    end

    # Fetch decision admission
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] decision_id Required parameter: Direct Debit
    # decision id
    # @param [UUID | String] admission_id Required parameter: Direct Debit
    # Admission Id
    # @return [DirectDebitDecisionAdmissionDetailsResponse] response from the API call
    def get_directdebits_id_decisions_decision_id_admissions_admission_id(id,
                                                                          decision_id,
                                                                          admission_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits/{id}/decisions/{decisionId}/admissions/{admissionId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(decision_id, key: 'decisionId')
                                    .should_encode(true))
                   .template_param(new_parameter(admission_id, key: 'admissionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitDecisionAdmissionDetailsResponse.method(:from_hash)))
        .execute
    end

    # Create direct debit decision submission
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] decision_id Required parameter: Direct Debit
    # decision id
    # @param [DirectDebitDecisionSubmissionCreation]
    # direct_debit_decision_submission_creation_request Optional parameter:
    # Example:
    # @return [DirectDebitDecisionSubmissionCreationResponse] response from the API call
    def post_directdebits_id_decisions_decision_id_submissions(id,
                                                               decision_id,
                                                               direct_debit_decision_submission_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/transaction/directdebits/{id}/decisions/{decisionId}/submissions',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(decision_id, key: 'decisionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(direct_debit_decision_submission_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitDecisionSubmissionCreationResponse.method(:from_hash))
                   .local_error('400',
                                'Direct Debit decision submission creation error',
                                ApiErrorException)
                   .local_error('409',
                                'Direct Debit decision submission creation conflict error',
                                ApiErrorException))
        .execute
    end

    # Get direct debit decision submission
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] decision_id Required parameter: Direct Debit
    # decision id
    # @param [UUID | String] submission_id Required parameter: Direct Debit
    # decision submission id
    # @return [DirectDebitDecisionSubmissionDetailsResponse] response from the API call
    def get_directdebits_id_decisions_decision_id_submissions_submission_id(id,
                                                                            decision_id,
                                                                            submission_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits/{id}/decisions/{decisionId}/submissions/{submissionId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(decision_id, key: 'decisionId')
                                    .should_encode(true))
                   .template_param(new_parameter(submission_id, key: 'submissionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitDecisionSubmissionDetailsResponse.method(:from_hash)))
        .execute
    end

    # Create recall
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [DirectDebitRecallCreation] recall_creation_request Optional
    # parameter: Example:
    # @return [DirectDebitRecallCreationResponse] response from the API call
    def post_directdebits_id_recalls(id,
                                     recall_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/transaction/directdebits/{id}/recalls',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(recall_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitRecallCreationResponse.method(:from_hash))
                   .local_error('400',
                                'Recall creation error',
                                ApiErrorException))
        .execute
    end

    # Fetch recall
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] recall_id Required parameter: Recall Id
    # @return [DirectDebitRecallDetailsResponse] response from the API call
    def get_directdebits_id_recalls_recall_id(id,
                                              recall_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits/{id}/recalls/{recallId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(recall_id, key: 'recallId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitRecallDetailsResponse.method(:from_hash)))
        .execute
    end

    # Fetch recall admission
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] recall_id Required parameter: Recall Id
    # @param [UUID | String] admission_id Required parameter: Direct Debit
    # Admission Id
    # @return [DirectDebitRecallAdmissionDetailsResponse] response from the API call
    def get_directdebits_id_recalls_recall_id_admissions_admission_id(id,
                                                                      recall_id,
                                                                      admission_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits/{id}/recalls/{recallId}/admissions/{admissionId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(recall_id, key: 'recallId')
                                    .should_encode(true))
                   .template_param(new_parameter(admission_id, key: 'admissionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitRecallAdmissionDetailsResponse.method(:from_hash)))
        .execute
    end

    # Fetch recall submission
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] recall_id Required parameter: Recall Id
    # @param [UUID | String] submission_id Required parameter: Direct Debit
    # decision submission id
    # @return [DirectDebitRecallSubmissionDetailsResponse] response from the API call
    def get_directdebits_id_recalls_recall_id_submissions_submission_id(id,
                                                                        recall_id,
                                                                        submission_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits/{id}/recalls/{recallId}/submissions/{submissionId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(recall_id, key: 'recallId')
                                    .should_encode(true))
                   .template_param(new_parameter(submission_id, key: 'submissionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitRecallSubmissionDetailsResponse.method(:from_hash)))
        .execute
    end

    # Create direct debit return
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [DirectDebitReturnCreation] return_creation_request Optional
    # parameter: Example:
    # @return [DirectDebitReturnCreationResponse] response from the API call
    def post_directdebits_id_returns(id,
                                     return_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/transaction/directdebits/{id}/returns',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(return_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitReturnCreationResponse.method(:from_hash))
                   .local_error('400',
                                'Return creation error',
                                ApiErrorException))
        .execute
    end

    # Fetch direct debit return
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] return_id Required parameter: Return Id
    # @return [DirectDebitReturnDetailsResponse] response from the API call
    def get_directdebits_id_returns_return_id(id,
                                              return_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits/{id}/returns/{returnId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(return_id, key: 'returnId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitReturnDetailsResponse.method(:from_hash)))
        .execute
    end

    # Fetch return admission
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] return_id Required parameter: Return Id
    # @param [UUID | String] admission_id Required parameter: Direct Debit
    # Admission Id
    # @return [DirectDebitReturnAdmissionDetailsResponse] response from the API call
    def get_directdebits_id_returns_return_id_admissions_admission_id(id,
                                                                      return_id,
                                                                      admission_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits/{id}/returns/{returnId}/admissions/{admissionId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(return_id, key: 'returnId')
                                    .should_encode(true))
                   .template_param(new_parameter(admission_id, key: 'admissionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitReturnAdmissionDetailsResponse.method(:from_hash)))
        .execute
    end

    # Fetch return admission
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] return_id Required parameter: Return Id
    # @param [UUID | String] reversal_id Required parameter: Reversal Id
    # @return [DirectDebitReturnReversalDetailsResponse] response from the API call
    def get_directdebits_id_returns_return_id_reversals_reversal_id(id,
                                                                    return_id,
                                                                    reversal_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits/{id}/returns/{returnId}/reversals/{reversalId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(return_id, key: 'returnId')
                                    .should_encode(true))
                   .template_param(new_parameter(reversal_id, key: 'reversalId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitReturnReversalDetailsResponse.method(:from_hash)))
        .execute
    end

    # Fetch return admission
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] return_id Required parameter: Return Id
    # @param [UUID | String] reversal_id Required parameter: Reversal Id
    # @param [UUID | String] admission_id Required parameter: Direct Debit
    # Admission Id
    # @return [DirectDebitReturnReversalAdmissionDetailsResponse] response from the API call
    def get_directdebits_id_returns_return_id_reversals_reversal_id_admissions_admission_id(id,
                                                                                            return_id,
                                                                                            reversal_id,
                                                                                            admission_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits/{id}/returns/{returnId}/reversals/{reversalId}/admissions/{admissionId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(return_id, key: 'returnId')
                                    .should_encode(true))
                   .template_param(new_parameter(reversal_id, key: 'reversalId')
                                    .should_encode(true))
                   .template_param(new_parameter(admission_id, key: 'admissionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitReturnReversalAdmissionDetailsResponse.method(:from_hash)))
        .execute
    end

    # create direct debit return submission
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] return_id Required parameter: Return Id
    # @param [DirectDebitReturnSubmissionCreation]
    # return_submission_creation_request Optional parameter: Example:
    # @return [DirectDebitReturnSubmissionCreationResponse] response from the API call
    def post_directdebits_id_returns_return_id_submissions(id,
                                                           return_id,
                                                           return_submission_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/transaction/directdebits/{id}/returns/{returnId}/submissions',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(return_id, key: 'returnId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(return_submission_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitReturnSubmissionCreationResponse.method(:from_hash))
                   .local_error('400',
                                'Return submission creation error',
                                ApiErrorException))
        .execute
    end

    # Fetch return submission
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] return_id Required parameter: Return Id
    # @param [UUID | String] submission_id Required parameter: Direct Debit
    # decision submission id
    # @return [DirectDebitReturnSubmissionDetailsResponse] response from the API call
    def get_directdebits_id_returns_return_id_submissions_submission_id(id,
                                                                        return_id,
                                                                        submission_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits/{id}/returns/{returnId}/submissions/{submissionId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(return_id, key: 'returnId')
                                    .should_encode(true))
                   .template_param(new_parameter(submission_id, key: 'submissionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitReturnSubmissionDetailsResponse.method(:from_hash)))
        .execute
    end

    # Create direct debit reversal
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [DirectDebitReversalCreation] reversal_creation_request Optional
    # parameter: Example:
    # @return [DirectDebitReversalCreationResponse] response from the API call
    def post_directdebits_id_reversals(id,
                                       reversal_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/transaction/directdebits/{id}/reversals',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(reversal_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitReversalCreationResponse.method(:from_hash))
                   .local_error('400',
                                'Reversal creation error',
                                ApiErrorException))
        .execute
    end

    # Fetch direct debit reversal
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] reversal_id Required parameter: Reversal Id
    # @return [DirectDebitReversalDetailsResponse] response from the API call
    def get_directdebits_id_reversals_reversal_id(id,
                                                  reversal_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits/{id}/reversals/{reversalId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(reversal_id, key: 'reversalId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitReversalDetailsResponse.method(:from_hash)))
        .execute
    end

    # Fetch reversal admission
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] reversal_id Required parameter: Reversal Id
    # @param [UUID | String] admission_id Required parameter: Direct Debit
    # Admission Id
    # @return [DirectDebitReversalAdmissionDetailsResponse] response from the API call
    def get_directdebits_id_reversals_reversal_id_admissions_admission_id(id,
                                                                          reversal_id,
                                                                          admission_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits/{id}/reversals/{reversalId}/admissions/{admissionId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(reversal_id, key: 'reversalId')
                                    .should_encode(true))
                   .template_param(new_parameter(admission_id, key: 'admissionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitReversalAdmissionDetailsResponse.method(:from_hash)))
        .execute
    end

    # create reversal submission
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] reversal_id Required parameter: Reversal Id
    # @param [DirectDebitReversalSubmissionCreation]
    # reversal_submission_creation_request Optional parameter: Example:
    # @return [DirectDebitReversalSubmissionCreationResponse] response from the API call
    def post_directdebits_id_reversals_reversal_id_submissions(id,
                                                               reversal_id,
                                                               reversal_submission_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/transaction/directdebits/{id}/reversals/{reversalId}/submissions',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(reversal_id, key: 'reversalId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(reversal_submission_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitReversalSubmissionCreationResponse.method(:from_hash))
                   .local_error('400',
                                'Reversal submission creation error',
                                ApiErrorException))
        .execute
    end

    # Fetch reversal submission
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] reversal_id Required parameter: Reversal Id
    # @param [UUID | String] submission_id Required parameter: Direct Debit
    # decision submission id
    # @return [DirectDebitReversalSubmissionDetailsResponse] response from the API call
    def get_directdebits_id_reversals_reversal_id_submissions_submission_id(id,
                                                                            reversal_id,
                                                                            submission_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits/{id}/reversals/{reversalId}/submissions/{submissionId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(reversal_id, key: 'reversalId')
                                    .should_encode(true))
                   .template_param(new_parameter(submission_id, key: 'submissionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitReversalSubmissionDetailsResponse.method(:from_hash)))
        .execute
    end

    # Create direct debit submission
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [DirectDebitSubmissionCreation]
    # direct_debit_submission_creation_request Optional parameter: Example:
    # @return [DirectDebitSubmissionCreationResponse] response from the API call
    def post_directdebits_id_submissions(id,
                                         direct_debit_submission_creation_request: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/transaction/directdebits/{id}/submissions',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.api+json', key: 'Content-Type'))
                   .body_param(new_parameter(direct_debit_submission_creation_request))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitSubmissionCreationResponse.method(:from_hash))
                   .local_error('400',
                                'Return submission creation error',
                                ApiErrorException))
        .execute
    end

    # Get direct debit submission
    # @param [UUID | String] id Required parameter: Direct Debit Id
    # @param [UUID | String] submission_id Required parameter: Direct Debit
    # decision submission id
    # @return [DirectDebitSubmissionDetailsResponse] response from the API call
    def get_directdebits_id_submissions_submission_id(id,
                                                      submission_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/transaction/directdebits/{id}/submissions/{submissionId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .template_param(new_parameter(submission_id, key: 'submissionId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('OAuth2')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(DirectDebitSubmissionDetailsResponse.method(:from_hash)))
        .execute
    end
  end
end
